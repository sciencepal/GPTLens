	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-41052">CVE-2023-41052</a></td>
		<td valign="top">Vyper is a Pythonic Smart Contract Language. In affected versions the order of evaluation of the arguments of the builtin functions `uint256_addmod`, `uint256_mulmod`, `ecadd` and `ecmul` does not follow source order. This behaviour is problematic when the evaluation of one of the arguments produces side effects that other arguments depend on. A patch is currently being developed on pull request #3583. When using builtins from the list above, users should make sure that the arguments of the expression do not produce side effects or, if one does, that no other argument is dependent on those side effects.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-40015">CVE-2023-40015</a></td>
		<td valign="top">Vyper is a Pythonic Smart Contract Language. For the following (probably non-exhaustive) list of expressions, the compiler evaluates the arguments from right to left instead of left to right. `unsafe_add, unsafe_sub, unsafe_mul, unsafe_div, pow_mod256, |, &amp;, ^ (bitwise operators), bitwise_or (deprecated), bitwise_and (deprecated), bitwise_xor (deprecated), raw_call, &lt;, &gt;, &lt;=, &gt;=, ==, !=, in, not in (when lhs and rhs are enums)`. This behaviour becomes a problem when the evaluation of one of the arguments produces side effects that other arguments depend on. The following expressions can produce side-effect: state modifying external call , state modifying internal call, `raw_call`, `pop()` when used on a Dynamic Array stored in the storage, `create_minimal_proxy_to`, `create_copy_of`, `create_from_blueprint`. This issue has not yet been patched. Users are advised to make sure that the arguments of the expression do not produce side effects or, if one does, that no other argument is dependent on those side effects.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-40014">CVE-2023-40014</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for secure smart contract development. Starting in version 4.0.0 and prior to version 4.9.3, contracts using `ERC2771Context` along with a custom trusted forwarder may see `_msgSender` return `address(0)` in calls that originate from the forwarder with calldata shorter than 20 bytes. This combination of circumstances does not appear to be common, in particular it is not the case for `MinimalForwarder` from OpenZeppelin Contracts, or any deployed forwarder the team is aware of, given that the signer address is appended to all calls that originate from these forwarders. The problem has been patched in v4.9.3.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-39363">CVE-2023-39363</a></td>
		<td valign="top">Vyer is a Pythonic Smart Contract Language for the Ethereum Virtual Machine (EVM). In versions 0.2.15, 0.2.16 and 0.3.0, named re-entrancy locks are allocated incorrectly. Each function using a named re-entrancy lock gets a unique lock regardless of the key, allowing cross-function re-entrancy in contracts compiled with the susceptible versions. A specific set of conditions is required to result in misbehavior of affected contracts, specifically: a `.vy` contract compiled with `vyper` versions `0.2.15`, `0.2.16`, or `0.3.0`; a primary function that utilizes the `@nonreentrant` decorator with a specific `key` and does not strictly follow the check-effects-interaction pattern (i.e. contains an external call to an untrusted party before storage updates); and a secondary function that utilizes the same `key` and would be affected by the improper state caused by the primary function. Version 0.3.1 contains a fix for this issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-34459">CVE-2023-34459</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for smart contract development. Starting in version 4.7.0 and prior to version 4.9.2, when the `verifyMultiProof`, `verifyMultiProofCalldata`, `procesprocessMultiProof`, or `processMultiProofCalldat` functions are in use, it is possible to construct merkle trees that allow forging a valid multiproof for an arbitrary set of leaves. A contract may be vulnerable if it uses multiproofs for verification and the merkle tree that is processed includes a node with value 0 at depth 1 (just under the root). This could happen inadvertedly for balanced trees with 3 leaves or less, if the leaves are not hashed. This could happen deliberately if a malicious tree builder includes such a node in the tree. A contract is not vulnerable if it uses single-leaf proving (`verify`, `verifyCalldata`, `processProof`, or `processProofCalldata`), or if it uses multiproofs with a known tree that has hashed leaves. Standard merkle trees produced or validated with the @openzeppelin/merkle-tree library are safe. The problem has been patched in version 4.9.2. Some workarounds are available. For those using multiproofs: When constructing merkle trees hash the leaves and do not insert empty nodes in your trees. Using the @openzeppelin/merkle-tree package eliminates this issue. Do not accept user-provided merkle roots without reconstructing at least the first level of the tree. Verify the merkle tree structure by reconstructing it from the leaves.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-34449">CVE-2023-34449</a></td>
		<td valign="top">ink! is an embedded domain specific language to write smart contracts in Rust for blockchains built on the Substrate framework. Starting in version 4.0.0 and prior to version 4.2.1, the return value when using delegate call mechanics, either through `CallBuilder::delegate` or `ink_env::invoke_contract_delegate`, is decoded incorrectly. This bug was related to the mechanics around decoding a call's return buffer, which was changed as part of pull request 1450. Since this feature was only released in ink! 4.0.0, no previous versions are affected. Users who have an ink! 4.x series contract should upgrade to 4.2.1 to receive a patch.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-34234">CVE-2023-34234</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for smart contract development. By frontrunning the creation of a proposal, an attacker can become the proposer and gain the ability to cancel it. The attacker can do this repeatedly to try to prevent a proposal from being proposed at all. This impacts the `Governor` contract in v4.9.0 only, and the `GovernorCompatibilityBravo` contract since v4.3.0. This problem has been patched in 4.9.1 by introducing opt-in frontrunning protection. Users are advised to upgrade. Users unable to upgrade may submit the proposal creation transaction to an endpoint with frontrunning protection as a workaround.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-32675">CVE-2023-32675</a></td>
		<td valign="top">Vyper is a pythonic Smart Contract Language for the ethereum virtual machine. In contracts with more than one regular nonpayable function, it is possible to send funds to the default function, even if the default function is marked `nonpayable`. This applies to contracts compiled with vyper versions prior to 0.3.8. This issue was fixed by the removal of the global `calldatasize` check in commit `02339dfda`. Users are advised to upgrade to version 0.3.8. Users unable to upgrade should avoid use of nonpayable default functions.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-32059">CVE-2023-32059</a></td>
		<td valign="top">Vyper is a Pythonic smart contract language for the Ethereum virtual machine. Prior to version 0.3.8, internal calls with default arguments are compiled incorrectly. Depending on the number of arguments provided in the call, the defaults are added not right-to-left, but left-to-right. If the types are incompatible, typechecking is bypassed. The ability to pass kwargs to internal functions is an undocumented feature that is not well known about. The issue is patched in version 0.3.8.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-32058">CVE-2023-32058</a></td>
		<td valign="top">Vyper is a Pythonic smart contract language for the Ethereum virtual machine. Prior to version 0.3.8, due to missing overflow check for loop variables, by assigning the iterator of a loop to a variable, it is possible to overflow the type of the latter. The issue seems to happen only in loops of type `for i in range(a, a + N)` as in loops of type `for i in range(start, stop)` and `for i in range(stop)`, the compiler is able to raise a `TypeMismatch` when trying to overflow the variable. The problem has been patched in version 0.3.8.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-31146">CVE-2023-31146</a></td>
		<td valign="top">Vyper is a Pythonic smart contract language for the Ethereum virtual machine. Prior to version 0.3.8, during codegen, the length word of a dynarray is written before the data, which can result in out-of-bounds array access in the case where the dynarray is on both the lhs and rhs of an assignment. The issue can cause data corruption across call frames. The expected behavior is to revert due to out-of-bounds array access. Version 0.3.8 contains a patch for this issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-30837">CVE-2023-30837</a></td>
		<td valign="top">Vyper is a pythonic smart contract language for the EVM. The storage allocator does not guard against allocation overflows in versions prior to 0.3.8. An attacker can overwrite the owner variable. This issue was fixed in version 0.3.8.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-30629">CVE-2023-30629</a></td>
		<td valign="top">Vyper is a Pythonic Smart Contract Language for the ethereum virtual machine. In versions 0.3.1 through 0.3.7, the Vyper compiler generates the wrong bytecode. Any contract that uses the `raw_call` with `revert_on_failure=False` and `max_outsize=0` receives the wrong response from `raw_call`. Depending on the memory garbage, the result can be either `True` or `False`. A patch is available and, as of time of publication, anticipated to be part of Vyper 0.3.8. As a workaround, one may always put `max_outsize&gt;0`.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-30542">CVE-2023-30542</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for secure smart contract development. The proposal creation entrypoint (`propose`) in `GovernorCompatibilityBravo` allows the creation of proposals with a `signatures` array shorter than the `calldatas` array. This causes the additional elements of the latter to be ignored, and if the proposal succeeds the corresponding actions would eventually execute without any calldata. The `ProposalCreated` event correctly represents what will eventually execute, but the proposal parameters as queried through `getActions` appear to respect the original intended calldata. This issue has been patched in 4.8.3. As a workaround, ensure that all proposals that pass through governance have equal length `signatures` and `calldatas` parameters.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-30541">CVE-2023-30541</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for secure smart contract development. A function in the implementation contract may be inaccessible if its selector clashes with one of the proxy's own selectors. Specifically, if the clashing function has a different signature with incompatible ABI encoding, the proxy could revert while attempting to decode the arguments from calldata. The probability of an accidental clash is negligible, but one could be caused deliberately and could cause a reduction in availability. The issue has been fixed in version 4.8.3. As a workaround if a function appears to be inaccessible for this reason, it may be possible to craft the calldata such that ABI decoding does not fail at the proxy and the function is properly proxied through.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-26488">CVE-2023-26488</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for secure smart contract development. The ERC721Consecutive contract designed for minting NFTs in batches does not update balances when a batch has size 1 and consists of a single token. Subsequent transfers from the receiver of that token may overflow the balance as reported by `balanceOf`. The issue exclusively presents with batches of size 1. The issue has been patched in 4.8.2.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2023-23940">CVE-2023-23940</a></td>
		<td valign="top">OpenZeppelin Contracts for Cairo is a library for secure smart contract development written in Cairo for StarkNet, a decentralized ZK Rollup. `is_valid_eth_signature` is missing a call to `finalize_keccak` after calling `verify_eth_signature`. As a result, any contract using `is_valid_eth_signature` from the account library (such as the `EthAccount` preset) is vulnerable to a malicious sequencer. Specifically, the malicious sequencer would be able to bypass signature validation to impersonate an instance of these accounts. The issue has been patched in 0.6.1.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-46173">CVE-2022-46173</a></td>
		<td valign="top">Elrond-GO is a go implementation for the Elrond Network protocol. Versions prior to 1.3.50 are subject to a processing issue where nodes are affected when trying to process a cross-shard relayed transaction with a smart contract deploy transaction data. The problem was a bad correlation between the transaction caches and the processing component. If the above-mentioned transaction was sent with more gas than required, the smart contract result (SCR transaction) that should have returned the leftover gas, would have been wrongly added to a cache that the processing unit did not consider. The node stopped notarizing metachain blocks. The fix was actually to extend the SCR transaction search in all other caches if it wasn't found in the correct (expected) sharded-cache. There are no known workarounds at this time. This issue has been patched in version 1.3.50.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-39384">CVE-2022-39384</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for secure smart contract development. Before version 4.4.1 but after 3.2.0, initializer functions that are invoked separate from contract creation (the most prominent example being minimal proxies) may be reentered if they make an untrusted non-view external call. Once an initializer has finished running it can never be re-executed. However, an exception put in place to support multiple inheritance made reentrancy possible in the scenario described above, breaking the expectation that there is a single execution. Note that upgradeable proxies are commonly initialized together with contract creation, where reentrancy is not feasible, so the impact of this issue is believed to be minor. This issue has been patched, please upgrade to version 4.4.1. As a workaround, avoid untrusted external calls during initialization.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-36061">CVE-2022-36061</a></td>
		<td valign="top">Elrond go is the go implementation for the Elrond Network protocol. In versions prior to 1.3.35, read only calls between contracts can generate smart contracts results. For example, if contract A calls in read only mode contract B and the called function will make changes upon the contract's B state, the state will be altered for contract B as if the call was not made in the read-only mode. This can lead to some effects not designed by the original smart contracts programmers. This issue was patched in version 1.3.35. There are no known workarounds.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-35961">CVE-2022-35961</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for secure smart contract development. The functions `ECDSA.recover` and `ECDSA.tryRecover` are vulnerable to a kind of signature malleability due to accepting EIP-2098 compact signatures in addition to the traditional 65 byte signature format. This is only an issue for the functions that take a single `bytes` argument, and not the functions that take `r, v, s` or `r, vs` as separate arguments. The potentially affected contracts are those that implement signature reuse or replay protection by marking the signature itself as used rather than the signed message or a nonce included in it. A user may take a signature that has already been submitted, submit it again in a different form, and bypass this protection. The issue has been patched in 4.7.3.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-35916">CVE-2022-35916</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for secure smart contract development. Contracts using the cross chain utilities for Arbitrum L2, `CrossChainEnabledArbitrumL2` or `LibArbitrumL2`, will classify direct interactions of externally owned accounts (EOAs) as cross chain calls, even though they are not started on L1. This issue has been patched in v4.7.2. Users are advised to upgrade. There are no known workarounds for this issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-35915">CVE-2022-35915</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for secure smart contract development. The target contract of an EIP-165 `supportsInterface` query can cause unbounded gas consumption by returning a lot of data, while it is generally assumed that this operation has a bounded cost. The issue has been fixed in v4.7.2. Users are advised to upgrade. There are no known workarounds for this issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-31198">CVE-2022-31198</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for secure smart contract development. This issue concerns instances of Governor that use the module `GovernorVotesQuorumFraction`, a mechanism that determines quorum requirements as a percentage of the voting token's total supply. In affected instances, when a proposal is passed to lower the quorum requirements, past proposals may become executable if they had been defeated only due to lack of quorum, and the number of votes it received meets the new quorum requirement. Analysis of instances on chain found only one proposal that met this condition, and we are actively monitoring for new occurrences of this particular issue. This issue has been patched in v4.7.2. Users are advised to upgrade. Users unable to upgrade should consider avoiding lowering quorum requirements if a past proposal was defeated for lack of quorum.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-31172">CVE-2022-31172</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for smart contract development. Versions 4.1.0 until 4.7.1 are vulnerable to the SignatureChecker reverting. `SignatureChecker.isValidSignatureNow` is not expected to revert. However, an incorrect assumption about Solidity 0.8's `abi.decode` allows some cases to revert, given a target contract that doesn't implement EIP-1271 as expected. The contracts that may be affected are those that use `SignatureChecker` to check the validity of a signature and handle invalid signatures in a way other than reverting. The issue was patched in version 4.7.1.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-31170">CVE-2022-31170</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for smart contract development. Versions 4.0.0 until 4.7.1 are vulnerable to ERC165Checker reverting instead of returning `false`. `ERC165Checker.supportsInterface` is designed to always successfully return a boolean, and under no circumstance revert. However, an incorrect assumption about Solidity 0.8's `abi.decode` allows some cases to revert, given a target contract that doesn't implement EIP-165 as expected, specifically if it returns a value other than 0 or 1. The contracts that may be affected are those that use `ERC165Checker` to check for support for an interface and then handle the lack of support in a way other than reverting. The issue was patched in version 4.7.1.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-29255">CVE-2022-29255</a></td>
		<td valign="top">Vyper is a Pythonic Smart Contract Language for the ethereum virtual machine. In versions prior to 0.3.4 when a calling an external contract with no return value, the contract address (including side effects) could be evaluated twice. This may result in incorrect outcomes for contracts. This issue has been addressed in v0.3.4.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-27134">CVE-2022-27134</a></td>
		<td valign="top">EOSIO batdappboomx v327c04cf has an Access-control vulnerability in the `transfer` function of the smart contract which allows remote attackers to win the cryptocurrency without paying ticket fee via the `std::string memo` parameter.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-24845">CVE-2022-24845</a></td>
		<td valign="top">Vyper is a pythonic Smart Contract Language for the ethereum virtual machine. In affected versions, the return of `&lt;iface&gt;.returns_int128()` is not validated to fall within the bounds of `int128`. This issue can result in a misinterpretation of the integer value and lead to incorrect behavior. As of v0.3.0, `&lt;iface&gt;.returns_int128()` is validated in simple expressions, but not complex expressions. Users are advised to upgrade. There is no known workaround for this issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-24788">CVE-2022-24788</a></td>
		<td valign="top">Vyper is a pythonic Smart Contract Language for the ethereum virtual machine. Versions of vyper prior to 0.3.2 suffer from a potential buffer overrun. Importing a function from a JSON interface which returns `bytes` generates bytecode which does not clamp bytes length, potentially resulting in a buffer overrun. Users are advised to upgrade. There are no known workarounds for this issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2022-24787">CVE-2022-24787</a></td>
		<td valign="top">Vyper is a Pythonic Smart Contract Language for the Ethereum Virtual Machine. In version 0.3.1 and prior, bytestrings can have dirty bytes in them, resulting in the word-for-word comparisons giving incorrect results. Even without dirty nonzero bytes, two bytestrings can compare to equal if one ends with `"\x00"` because there is no comparison of the length. A patch is available and expected to be part of the 0.3.2 release. There are currently no known workarounds.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2021-41264">CVE-2021-41264</a></td>
		<td valign="top">OpenZeppelin Contracts is a library for smart contract development. In affected versions upgradeable contracts using `UUPSUpgradeable` may be vulnerable to an attack affecting uninitialized implementation contracts. A fix is included in version 4.3.2 of `@openzeppelin/contracts` and `@openzeppelin/contracts-upgradeable`. For users unable to upgrade; initialize implementation contracts using `UUPSUpgradeable` by invoking the initializer function (usually called `initialize`). An example is provided [in the forum](https://forum.openzeppelin.com/t/security-advisory-initialize-uups-implementation-contracts/15301).

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2021-41122">CVE-2021-41122</a></td>
		<td valign="top">Vyper is a Pythonic Smart Contract Language for the EVM. In affected versions external functions did not properly validate the bounds of decimal arguments. The can lead to logic errors. This issue has been resolved in version 0.3.0.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2021-41121">CVE-2021-41121</a></td>
		<td valign="top">Vyper is a Pythonic Smart Contract Language for the EVM. In affected versions when performing a function call inside a literal struct, there is a memory corruption issue that occurs because of an incorrect pointer to the the top of the stack. This issue has been resolved in version 0.3.0.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2021-39168">CVE-2021-39168</a></td>
		<td valign="top">OpenZepplin is a library for smart contract development. In affected versions a vulnerability in TimelockController allowed an actor with the executor role to escalate privileges. Further details about the vulnerability will be disclosed at a later date. As a workaround revoke the executor role from accounts not strictly under the team's control. We recommend revoking all executors that are not also proposers. When applying this mitigation, ensure there is at least one proposer and executor remaining.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2021-39167">CVE-2021-39167</a></td>
		<td valign="top">OpenZepplin is a library for smart contract development. In affected versions a vulnerability in TimelockController allowed an actor with the executor role to escalate privileges. Further details about the vulnerability will be disclosed at a later date. As a workaround revoke the executor role from accounts not strictly under the team's control. We recommend revoking all executors that are not also proposers. When applying this mitigation, ensure there is at least one proposer and executor remaining.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2021-34273">CVE-2021-34273</a></td>
		<td valign="top">A security flaw in the 'owned' function of a smart contract implementation for BTC2X (B2X), a tradeable Ethereum ERC20 token, allows attackers to hijack victim accounts and arbitrarily increase the digital supply of assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2021-34272">CVE-2021-34272</a></td>
		<td valign="top">A security flaw in the 'owned' function of a smart contract implementation for RobotCoin (RBTC), a tradeable Ethereum ERC20 token, allows attackers to hijack victim accounts and arbitrarily increase the digital supply of assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2021-34270">CVE-2021-34270</a></td>
		<td valign="top">An integer overflow in the mintToken function of a smart contract implementation for Doftcoin Token, an Ethereum ERC20 token, allows the owner to cause unexpected financial losses.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2021-33403">CVE-2021-33403</a></td>
		<td valign="top">An integer overflow in the transfer function of a smart contract implementation for Lancer Token, an Ethereum ERC20 token, allows the owner to cause unexpected financial losses between two large accounts during a transaction.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2021-3006">CVE-2021-3006</a></td>
		<td valign="top">The breed function in the smart contract implementation for Farm in Seal Finance (Seal), an Ethereum token, lacks access control and thus allows price manipulation, as exploited in the wild in December 2020 and January 2021.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2021-3004">CVE-2021-3004</a></td>
		<td valign="top">The _deposit function in the smart contract implementation for Stable Yield Credit (yCREDIT), an Ethereum token, has certain incorrect calculations. An attacker can obtain more yCREDIT tokens than they should.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2020-35962">CVE-2020-35962</a></td>
		<td valign="top">The sellTokenForLRC function in the vault protocol in the smart contract implementation for Loopring (LRC), an Ethereum token, lacks access control for fee swapping and thus allows price manipulation.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2020-17753">CVE-2020-17753</a></td>
		<td valign="top">An issue was discovered in function addMeByRC in the smart contract implementation for RC, an Ethereum token, allows attackers to transfer an arbitrary amount of tokens to an arbitrary address.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2020-17752">CVE-2020-17752</a></td>
		<td valign="top">Integer overflow vulnerability in payable function of a smart contract implementation for an Ethereum token, as demonstrated by the smart contract implemented at address 0xB49E984A83d7A638E7F2889fc8328952BA951AbE, an implementation for MillionCoin (MON).

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2019-15080">CVE-2019-15080</a></td>
		<td valign="top">An issue was discovered in a smart contract implementation for MORPH Token through 2019-06-05, an Ethereum token. A typo in the constructor of the Owned contract (which is inherited by MORPH Token) allows attackers to acquire contract ownership. A new owner can subsequently obtain MORPH Tokens for free and can perform a DoS attack.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2019-15079">CVE-2019-15079</a></td>
		<td valign="top">A typo exists in the constructor of a smart contract implementation for EAI through 2019-06-05, an Ethereum token. This vulnerability could be used by an attacker to acquire EAI tokens for free.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2019-15078">CVE-2019-15078</a></td>
		<td valign="top">An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-19834">CVE-2018-19834</a></td>
		<td valign="top">The quaker function of a smart contract implementation for BOMBBA (BOMB), an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function does not check the caller's identity.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-19833">CVE-2018-19833</a></td>
		<td valign="top">The owned function of a smart contract implementation for DDQ, an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function does not check the caller's identity.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-19832">CVE-2018-19832</a></td>
		<td valign="top">The NETM() function of a smart contract implementation for NewIntelTechMedia (NETM), an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function does not check the caller's identity.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-19831">CVE-2018-19831</a></td>
		<td valign="top">The ToOwner() function of a smart contract implementation for Cryptbond Network (CBN), an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function does not check the caller's identity.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-19830">CVE-2018-19830</a></td>
		<td valign="top">The UBSexToken() function of a smart contract implementation for Business Alliance Financial Circle (BAFC), an tradable Ethereum ERC20 token, allows attackers to change the owner of the contract, because the function is public (by default) and does not check the caller's identity.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-18425">CVE-2018-18425</a></td>
		<td valign="top">The doAirdrop function of a smart contract implementation for Primeo (PEO), an Ethereum token, does not check the numerical relationship between the amount of the air drop and the token's total supply, which lets the owner of the contract issue an arbitrary amount of currency. (Increasing the total supply by using 'doAirdrop' ignores the hard cap written in the contract and devalues the token.)

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-17987">CVE-2018-17987</a></td>
		<td valign="top">The determineWinner function of a smart contract implementation for HashHeroes Tiles, an Ethereum game, uses a certain blockhash value in an attempt to generate a random number for the case where NUM_TILES equals the number of people who purchased a tile, which allows an attacker to control the awarding of the prize by being the last person to purchase a tile.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-17968">CVE-2018-17968</a></td>
		<td valign="top">A gambling smart contract implementation for RuletkaIo, an Ethereum gambling game, generates a random value that is predictable by an external contract call. The developer wrote a random() function that uses a block timestamp and block hash from the Ethereum blockchain. This can be predicted by writing the same random function code in an exploit contract to determine the deadSeat value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-17882">CVE-2018-17882</a></td>
		<td valign="top">An Integer overflow vulnerability exists in the batchTransfer function of a smart contract implementation for CryptoBotsBattle (CBTB), an Ethereum token. This vulnerability could be used by an attacker to create an arbitrary amount of tokens for any user.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-17877">CVE-2018-17877</a></td>
		<td valign="top">A lottery smart contract implementation for Greedy 599, an Ethereum gambling game, generates a random value that is predictable via an external contract call. The developer used the extcodesize() function to prevent a malicious contract from being called, but the attacker can bypass it by writing the core code in the constructor of their exploit code. Therefore, it allows attackers to always win and get rewards.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-17111">CVE-2018-17111</a></td>
		<td valign="top">The onlyOwner modifier of a smart contract implementation for Coinlancer (CL), an Ethereum ERC20 token, has a potential access control vulnerability. All contract users can access functions that use this onlyOwner modifier, because the comparison between msg.sender and owner is incorrect.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-17071">CVE-2018-17071</a></td>
		<td valign="top">The fallback function of a simple lottery smart contract implementation for Lucky9io, an Ethereum gambling game, generates a random value with the publicly readable variable entry_number. This variable is private, yet it is readable by eth.getStorageAt function. Also, attackers can purchase a ticket at a low price by directly calling the fallback function with small msg.value, because the developer set the currency unit incorrectly. Therefore, it allows attackers to always win and get rewards.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-17050">CVE-2018-17050</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for PolyAi (AI), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-15552">CVE-2018-15552</a></td>
		<td valign="top">The "PayWinner" function of a simplelottery smart contract implementation for The Ethereum Lottery, an Ethereum gambling game, generates a random value with publicly readable variable "maxTickets" (which is private, yet predictable and readable by the eth.getStorageAt function). Therefore, it allows attackers to always win and get rewards.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14715">CVE-2018-14715</a></td>
		<td valign="top">The endCoinFlip function and throwSlammer function of the smart contract implementations for Cryptogs, an Ethereum game, generate random numbers with an old block's hash. Therefore, attackers can predict the random number and always win the game.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14576">CVE-2018-14576</a></td>
		<td valign="top">The mintTokens function of a smart contract implementation for SunContract, an Ethereum token, has an integer overflow via the _amount variable.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14089">CVE-2018-14089</a></td>
		<td valign="top">An issue was discovered in a smart contract implementation for Virgo_ZodiacToken, an Ethereum token. In this contract, 'bool sufficientAllowance = allowance &lt;= _value' will cause an arbitrary transfer in the function transferFrom because '&lt;=' is used instead of '&gt;=' (which was intended). An attacker can transfer from any address to his address, and does not need to meet the 'allowance &gt; value' condition.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14088">CVE-2018-14088</a></td>
		<td valign="top">An issue was discovered in a smart contract implementation for STeX White List (STE(WL)), an Ethereum token. The contract has an integer overflow. If the owner sets the value of amount to a large number then the "amount * 1000000000000000" will cause an integer overflow in withdrawToFounders().

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14087">CVE-2018-14087</a></td>
		<td valign="top">An issue was discovered in a smart contract implementation for EUC (EUC), an Ethereum token. The contract has an integer overflow. If the owner sets the value of buyPrice to a large number in setPrices() then the "msg.value * buyPrice" will cause an integer overflow in the fallback function.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14086">CVE-2018-14086</a></td>
		<td valign="top">An issue was discovered in a smart contract implementation for SingaporeCoinOrigin (SCO), an Ethereum token. The contract has an integer overflow. If the owner sets the value of sellPrice to a large number in setPrices() then the "amount * sellPrice" will cause an integer overflow in sell().

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14085">CVE-2018-14085</a></td>
		<td valign="top">An issue was discovered in a smart contract implementation for UserWallet 0x0a7bca9FB7AfF26c6ED8029BB6f0F5D291587c42, an Ethereum token. First, suppose that the owner adds the evil contract address to his sweepers. The evil contract looks like this: contract Exploit { uint public start; function sweep(address _token, uint _amount) returns (bool) { start = 0x123456789; return true;} }. Then, when one calls the function sweep() in the UserWallet contract, it will change the sweeperList to 0X123456789.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14084">CVE-2018-14084</a></td>
		<td valign="top">An issue was discovered in a smart contract implementation for MKCB, an Ethereum token. If the owner sets the value of sellPrice to a large number in setPrices() then the "amount * sellPrice" will cause an integer overflow in sell().

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14063">CVE-2018-14063</a></td>
		<td valign="top">The increaseApproval function of a smart contract implementation for Tracto (TRCT), an Ethereum ERC20 token, has an integer overflow.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14006">CVE-2018-14006</a></td>
		<td valign="top">An integer overflow vulnerability exists in the function multipleTransfer of Neo Genesis Token (NGT), an Ethereum token smart contract. An attacker could use it to set any user's balance.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14005">CVE-2018-14005</a></td>
		<td valign="top">An integer overflow vulnerability exists in the function transferAny of Malaysia coins (Xmc), an Ethereum token smart contract. An attacker could use it to set any user's balance.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14004">CVE-2018-14004</a></td>
		<td valign="top">An integer overflow vulnerability exists in the function transfer_tokens_after_ICO of GlobeCoin (GLB), an Ethereum token smart contract. An attacker could use it to set any user's balance.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14003">CVE-2018-14003</a></td>
		<td valign="top">An integer overflow vulnerability exists in the function batchTransfer of WeMediaChain (WMC), an Ethereum token smart contract. An attacker could use it to set any user's balance.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14002">CVE-2018-14002</a></td>
		<td valign="top">An integer overflow vulnerability exists in the function distribute of MP3 Coin (MP3), an Ethereum token smart contract. An attacker could use it to set any user's balance.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-14001">CVE-2018-14001</a></td>
		<td valign="top">An integer overflow vulnerability exists in the function batchTransfer of SHARKTECH (SKT), an Ethereum token smart contract. An attacker could use it to set any user's balance.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13877">CVE-2018-13877</a></td>
		<td valign="top">The doPayouts() function of the smart contract implementation for MegaCryptoPolis, an Ethereum game, has a Denial of Service vulnerability. If a smart contract that has a fallback function always causing exceptions buys a land, users cannot buy lands near that contract's land, because those purchase attempts will not be completed unless the doPayouts() function successfully sends Ether to certain neighbors.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13836">CVE-2018-13836</a></td>
		<td valign="top">An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13783">CVE-2018-13783</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for JiucaiToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13782">CVE-2018-13782</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ENTER (ENTR) (Contract Name: EnterCoin), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13781">CVE-2018-13781</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MyYLC, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13780">CVE-2018-13780</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ESH, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13779">CVE-2018-13779</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for YLCToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13778">CVE-2018-13778</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CGCToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13777">CVE-2018-13777</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for RRToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13776">CVE-2018-13776</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for AppleToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13775">CVE-2018-13775</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for RCKT_Coin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13774">CVE-2018-13774</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Bitstarti, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13773">CVE-2018-13773</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Enterprise Token Ecosystem (ETE) (Contract Name: NetkillerToken), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13772">CVE-2018-13772</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TheFlashToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13771">CVE-2018-13771</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ExacoreContract, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13770">CVE-2018-13770</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for UltimateCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13769">CVE-2018-13769</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for JeansToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13768">CVE-2018-13768</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ZToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13767">CVE-2018-13767</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Cornerstone, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13766">CVE-2018-13766</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Easticoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13765">CVE-2018-13765</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for LandCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13764">CVE-2018-13764</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BiquToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13763">CVE-2018-13763</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Ublasti, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13762">CVE-2018-13762</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Yumerium, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13761">CVE-2018-13761</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for NetkillerAdvancedTokenAirDrop, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13760">CVE-2018-13760</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MoneyChainNet (MCN), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13759">CVE-2018-13759</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BIGCAdvancedToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13758">CVE-2018-13758</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for LoliCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13757">CVE-2018-13757</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Coinquer, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13756">CVE-2018-13756</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CherryCoinFoundation, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13755">CVE-2018-13755</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for OTAKUToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13754">CVE-2018-13754</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CryptosisToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13753">CVE-2018-13753</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for DeWeiSecurityServiceToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13752">CVE-2018-13752</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Thread, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13751">CVE-2018-13751</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for JustWallet, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13750">CVE-2018-13750</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for RichiumToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13749">CVE-2018-13749</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for FinalToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13748">CVE-2018-13748</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CarToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13747">CVE-2018-13747</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for VanMinhCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13746">CVE-2018-13746</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for kBit, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13745">CVE-2018-13745</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for STCToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13744">CVE-2018-13744</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Crowdnext (CNX), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13743">CVE-2018-13743</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SuperEnergy (SEC), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13742">CVE-2018-13742</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for tickets (TKT), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13741">CVE-2018-13741</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ABLGenesisToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13740">CVE-2018-13740</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for OneChain, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13739">CVE-2018-13739</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for dopnetwork, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13738">CVE-2018-13738</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for PELOCoinToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13737">CVE-2018-13737</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for AnovaBace, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13736">CVE-2018-13736</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ELearningCoinERC, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13735">CVE-2018-13735</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ENTER (ENTR) (Contract Name: EnterToken), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13734">CVE-2018-13734</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for AZTToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13733">CVE-2018-13733</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ProjectJ, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13732">CVE-2018-13732</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for RiptideCoin (RIPT), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13731">CVE-2018-13731</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TokenMACHU, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13730">CVE-2018-13730</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for HEY, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13729">CVE-2018-13729</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for JPMD100B, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13728">CVE-2018-13728</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for JixoCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13727">CVE-2018-13727</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Eastcoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13726">CVE-2018-13726</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ISeeVoiceToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13725">CVE-2018-13725</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GlobalSuperGameToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13724">CVE-2018-13724</a></td>
		<td valign="top">The mint function of a smart contract implementation for HYIPCrowdsale1, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13723">CVE-2018-13723</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SERVVIZIOToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13722">CVE-2018-13722</a></td>
		<td valign="top">The mint function of a smart contract implementation for HYIPToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13721">CVE-2018-13721</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GoMineWorld, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13720">CVE-2018-13720</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Antoken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13719">CVE-2018-13719</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BiteduToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13718">CVE-2018-13718</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for FuturXe, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13717">CVE-2018-13717</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for HormitechToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13716">CVE-2018-13716</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for sexhdsolo, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13715">CVE-2018-13715</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BpsToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13714">CVE-2018-13714</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CM, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13713">CVE-2018-13713</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Tradesman, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13712">CVE-2018-13712</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for PMET, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13711">CVE-2018-13711</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Databits, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13710">CVE-2018-13710</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Mjolnir, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13709">CVE-2018-13709</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Tube, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13708">CVE-2018-13708</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Order (ETH) (Contract Name: BuyToken), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13707">CVE-2018-13707</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for YSS, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13706">CVE-2018-13706</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for IdeaCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13705">CVE-2018-13705</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for PMHToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13704">CVE-2018-13704</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for eddToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13703">CVE-2018-13703</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CERB_Coin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13702">CVE-2018-13702</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Essence, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13701">CVE-2018-13701</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for KissMe, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13700">CVE-2018-13700</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for IPMCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13699">CVE-2018-13699</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for DestiNeed (DSN), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13698">CVE-2018-13698</a></td>
		<td valign="top">The mintTokens function of a smart contract implementation for Play2LivePromo, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13697">CVE-2018-13697</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for RobotBTC, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13696">CVE-2018-13696</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for RedTicket, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13695">CVE-2018-13695</a></td>
		<td valign="top">The mint function of a smart contract implementation for CTest7, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13694">CVE-2018-13694</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GMile, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13693">CVE-2018-13693</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GreenEnergyToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13692">CVE-2018-13692</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MehdiTAZIToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13691">CVE-2018-13691</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for R Time Token v3 (RS) (Contract Name: RTokenMain), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13690">CVE-2018-13690</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Instacocoa, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13689">CVE-2018-13689</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CJXToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13688">CVE-2018-13688</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MallToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13687">CVE-2018-13687</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for normikaivo, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13686">CVE-2018-13686</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ICO Dollar (ICOD), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13685">CVE-2018-13685</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Vornox (VRX) (Contract Name: VornoxCoinToken), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13684">CVE-2018-13684</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ZIP, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13683">CVE-2018-13683</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for exsulcoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13682">CVE-2018-13682</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ViteMoneyCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13681">CVE-2018-13681</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SOSCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13680">CVE-2018-13680</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for LexitToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13679">CVE-2018-13679</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ZPEcoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13678">CVE-2018-13678</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Lottery, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13677">CVE-2018-13677</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Goochain, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13676">CVE-2018-13676</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Orderbook Presale Token (OBP), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13675">CVE-2018-13675</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for YAMBYO, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13674">CVE-2018-13674</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ComBillAdvancedToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13673">CVE-2018-13673</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GoldTokenERC20, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13672">CVE-2018-13672</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for OBTCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13671">CVE-2018-13671</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for DinsteinCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13670">CVE-2018-13670</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GFCB, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13669">CVE-2018-13669</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for NCU, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13668">CVE-2018-13668</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BTPCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13667">CVE-2018-13667</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for UTBTokenTest, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13666">CVE-2018-13666</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for EristicaICO, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13665">CVE-2018-13665</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BCaaS, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13664">CVE-2018-13664</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CWS, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13663">CVE-2018-13663</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BSCToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13662">CVE-2018-13662</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for WorldOpctionChain, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13661">CVE-2018-13661</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for APP, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13660">CVE-2018-13660</a></td>
		<td valign="top">The mint function of a smart contract implementation for BillionRewardsToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13659">CVE-2018-13659</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BrianCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13658">CVE-2018-13658</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TheGoDgital, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13657">CVE-2018-13657</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Rice, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13656">CVE-2018-13656</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Sample Token (STK) (Contract Name: cashBackMintable), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13655">CVE-2018-13655</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GFC, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13654">CVE-2018-13654</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ESTSToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13653">CVE-2018-13653</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ipshoots, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13652">CVE-2018-13652</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TheGoDigital, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13651">CVE-2018-13651</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MicoinNetworkToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13650">CVE-2018-13650</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BitmaxerToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13649">CVE-2018-13649</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Deploy, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13648">CVE-2018-13648</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BGC, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13647">CVE-2018-13647</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TrueGoldCoinToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13646">CVE-2018-13646</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Datiac, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13645">CVE-2018-13645</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Fiocoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13644">CVE-2018-13644</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for RoyalClassicCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13643">CVE-2018-13643</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GCRTokenERC20, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13642">CVE-2018-13642</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SECoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13641">CVE-2018-13641</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MVGcoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13640">CVE-2018-13640</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for EthereumSmart, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13639">CVE-2018-13639</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Virtual Energy Units (VEU) (Contract Name: VEU_TokenERC20), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13638">CVE-2018-13638</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Bitpark, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13637">CVE-2018-13637</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CikkaCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13636">CVE-2018-13636</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TurdCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13635">CVE-2018-13635</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for HBCM, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13634">CVE-2018-13634</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MediaCubeToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13633">CVE-2018-13633</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Martcoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13632">CVE-2018-13632</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for NEXPARA, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13631">CVE-2018-13631</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for doccoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13630">CVE-2018-13630</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for DoccoinPreICO, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13629">CVE-2018-13629</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CrimsonShilling, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13628">CVE-2018-13628</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MomentumToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13627">CVE-2018-13627</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MyOffer, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13626">CVE-2018-13626</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SemainToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13625">CVE-2018-13625</a></td>
		<td valign="top">The mintlvlToken function of a smart contract implementation for Krown, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13624">CVE-2018-13624</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for WXSLToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13623">CVE-2018-13623</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for AirdropperCryptics, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13622">CVE-2018-13622</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ObjectToken (OBJ), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13621">CVE-2018-13621</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SoundTribeToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13620">CVE-2018-13620</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TripCash, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13619">CVE-2018-13619</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MicoinToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13618">CVE-2018-13618</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for VICETOKEN_ICO_IS_A_SCAM, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13617">CVE-2018-13617</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CAPTOZ, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13616">CVE-2018-13616</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for IOCT_Coin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13615">CVE-2018-13615</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MJCToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13614">CVE-2018-13614</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MAVCash, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13613">CVE-2018-13613</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CON0217, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13612">CVE-2018-13612</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Robincoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13611">CVE-2018-13611</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CDcurrency, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13610">CVE-2018-13610</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MedicayunLink, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13609">CVE-2018-13609</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CSAToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13608">CVE-2018-13608</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for archercoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13607">CVE-2018-13607</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ResidualShare, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13606">CVE-2018-13606</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ARChain, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13605">CVE-2018-13605</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Extreme Coin (XT) (Contract Name: ExtremeToken), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13604">CVE-2018-13604</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for wellieat, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13603">CVE-2018-13603</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Briant2Token, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13602">CVE-2018-13602</a></td>
		<td valign="top">The mint function of a smart contract implementation for MiningToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13601">CVE-2018-13601</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GalacticX, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13600">CVE-2018-13600</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for AMToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13599">CVE-2018-13599</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ResidualValue, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13598">CVE-2018-13598</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SendMe, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13597">CVE-2018-13597</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for testcoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13596">CVE-2018-13596</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TESTAhihi, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13595">CVE-2018-13595</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BitStore, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13594">CVE-2018-13594</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CardFactory, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13593">CVE-2018-13593</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CardToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13592">CVE-2018-13592</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for RajTest, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13591">CVE-2018-13591</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for KAPcoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13590">CVE-2018-13590</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SIPCOIN, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13589">CVE-2018-13589</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MooAdvToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13588">CVE-2018-13588</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Code47 (C47), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13587">CVE-2018-13587</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for DECToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13586">CVE-2018-13586</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Nectar (NCTR), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13585">CVE-2018-13585</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CHERRYCOIN, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13584">CVE-2018-13584</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for yasudem, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13583">CVE-2018-13583</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Shmoo, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13582">CVE-2018-13582</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for My2Token, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13581">CVE-2018-13581</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TravelCoin (TRV), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13580">CVE-2018-13580</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ProvidenceCasino (PVE), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13579">CVE-2018-13579</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ForeverCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13578">CVE-2018-13578</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GalaxyCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13577">CVE-2018-13577</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ShitCoin (SHITC) (Contract Name: AdvancedShit), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13576">CVE-2018-13576</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Escut (ESCT) (Contract Name: JuntsPerCreixer), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13575">CVE-2018-13575</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for YESToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13574">CVE-2018-13574</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for DataShieldCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13573">CVE-2018-13573</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TripPay, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13572">CVE-2018-13572</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for PGM_Coin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13571">CVE-2018-13571</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GoramCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13570">CVE-2018-13570</a></td>
		<td valign="top">The mint function of a smart contract implementation for kkTestCoin1 (KTC1), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13569">CVE-2018-13569</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for HitToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13568">CVE-2018-13568</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MktCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13567">CVE-2018-13567</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SDR, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13566">CVE-2018-13566</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for RETNToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13565">CVE-2018-13565</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Co2Bit, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13564">CVE-2018-13564</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GATcoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13563">CVE-2018-13563</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for UPayToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13562">CVE-2018-13562</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BMVCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13561">CVE-2018-13561</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for YourCoin (ICO) (Contract Name: ETH033), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13560">CVE-2018-13560</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for KelvinToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13559">CVE-2018-13559</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for UTCT, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13558">CVE-2018-13558</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for rhovit, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13557">CVE-2018-13557</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Trabet_Coin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13556">CVE-2018-13556</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for COSMOTokenERC20, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13555">CVE-2018-13555</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for JaxBox, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13554">CVE-2018-13554</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MoneyTree (TREE), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13553">CVE-2018-13553</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Micro BTC (MBTC), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13552">CVE-2018-13552</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Trabet_Coin_PreICO, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13551">CVE-2018-13551</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Bgamecoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13550">CVE-2018-13550</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Coquinho Coin (CQNC) (Contract Name: CoquinhoERC20), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13549">CVE-2018-13549</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for NeuroToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13548">CVE-2018-13548</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Mimicoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13547">CVE-2018-13547</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Providence Crypto Casino (PVE) (Contract Name: ProvidenceCasinoToken), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13546">CVE-2018-13546</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CCASH, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13545">CVE-2018-13545</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for HashShield, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13544">CVE-2018-13544</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Numisma, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13543">CVE-2018-13543</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GemstoneToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13542">CVE-2018-13542</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ZIBToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13541">CVE-2018-13541</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CryptoLeu, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13540">CVE-2018-13540</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GSI, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13539">CVE-2018-13539</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Bcxss, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13538">CVE-2018-13538</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SIPCToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13537">CVE-2018-13537</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for EthereumLegit, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13536">CVE-2018-13536</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ERC20_ICO, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13535">CVE-2018-13535</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for PACCOIN, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13534">CVE-2018-13534</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SpeedCashLite (SCSL), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13533">CVE-2018-13533</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ALUXToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13532">CVE-2018-13532</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Mindexcoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13531">CVE-2018-13531</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MaxHouse, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13530">CVE-2018-13530</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for HunterCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13529">CVE-2018-13529</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BetterThanAdrien, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13528">CVE-2018-13528</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for DhaCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13527">CVE-2018-13527</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ElevateCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13526">CVE-2018-13526</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for WangWangToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13525">CVE-2018-13525</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Flow, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13524">CVE-2018-13524</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for PornCoin (PRNC), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13523">CVE-2018-13523</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SmartPayment, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13522">CVE-2018-13522</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for EXGROUP, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13521">CVE-2018-13521</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for PinkyToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13520">CVE-2018-13520</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TopscoinAdvanced, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13519">CVE-2018-13519</a></td>
		<td valign="top">The mint function of a smart contract implementation for DigitalCloudToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13518">CVE-2018-13518</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TCash, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13517">CVE-2018-13517</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for C3 Token (C3), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13516">CVE-2018-13516</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Super Cool Awesome Money (SCAM), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13515">CVE-2018-13515</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for aman, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13514">CVE-2018-13514</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for esportz, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13513">CVE-2018-13513</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Ubiou, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13512">CVE-2018-13512</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SmartHomeCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13511">CVE-2018-13511</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CorelliCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13510">CVE-2018-13510</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Welfare Token Fund (WTF), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13509">CVE-2018-13509</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for IamRich, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13508">CVE-2018-13508</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for VITToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13507">CVE-2018-13507</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SLCAdvancedToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13506">CVE-2018-13506</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SDR22, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13505">CVE-2018-13505</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ecogreenhouse, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13504">CVE-2018-13504</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MMCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13503">CVE-2018-13503</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for South Park Token Token (SPTKN), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13502">CVE-2018-13502</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for HeliumNetwork, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13501">CVE-2018-13501</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for HRWtoken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13500">CVE-2018-13500</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MSXAdvanced, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13499">CVE-2018-13499</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Crowdsale, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13498">CVE-2018-13498</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for KAPAYcoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13497">CVE-2018-13497</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for COBToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13496">CVE-2018-13496</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for RajTestICO, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13495">CVE-2018-13495</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for KMCToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13494">CVE-2018-13494</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SusanTokenERC20, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13493">CVE-2018-13493</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for DaddyToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13492">CVE-2018-13492</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for naga, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13491">CVE-2018-13491</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Carrot, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13490">CVE-2018-13490</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for FILM, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13489">CVE-2018-13489</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for OllisCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13488">CVE-2018-13488</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Crypto Alley Shares (CAST), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13487">CVE-2018-13487</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for PlatoToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13486">CVE-2018-13486</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for HELP, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13485">CVE-2018-13485</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BitcoinAgileToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13484">CVE-2018-13484</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CBRToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13483">CVE-2018-13483</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for mkethToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13482">CVE-2018-13482</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ETHERCASH (ETC), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13481">CVE-2018-13481</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TRIUM, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13480">CVE-2018-13480</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for QRG, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13479">CVE-2018-13479</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for SlidebitsToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13478">CVE-2018-13478</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for DMPToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13477">CVE-2018-13477</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CTESale, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13476">CVE-2018-13476</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for PhilCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13475">CVE-2018-13475</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for VSCToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13474">CVE-2018-13474</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for FansChainToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13473">CVE-2018-13473</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ohni_2 (OHNI), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13472">CVE-2018-13472</a></td>
		<td valign="top">The mint function of a smart contract implementation for CloutToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13471">CVE-2018-13471</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BeyondCashToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13470">CVE-2018-13470</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BuyerToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13469">CVE-2018-13469</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for IcoContract, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13468">CVE-2018-13468</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Cavecoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13467">CVE-2018-13467</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for EpiphanyCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13466">CVE-2018-13466</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Crystals, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13465">CVE-2018-13465</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for PaulyCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13464">CVE-2018-13464</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for t_swap, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13463">CVE-2018-13463</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for T-Swap-Token (T-S-T), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13462">CVE-2018-13462</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MoonToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13328">CVE-2018-13328</a></td>
		<td valign="top">The transfer, transferFrom, and mint functions of a smart contract implementation for PFGc, an Ethereum token, have an integer overflow.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13327">CVE-2018-13327</a></td>
		<td valign="top">** DISPUTED ** The transfer and transferFrom functions of a smart contract implementation for ChuCunLingAIGO (CCLAG), an Ethereum token, have an integer overflow. NOTE: this has been disputed by a third party.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13326">CVE-2018-13326</a></td>
		<td valign="top">** DISPUTED ** The transfer and transferFrom functions of a smart contract implementation for Bittelux (BTX), an Ethereum token, have an integer overflow. NOTE: this has been disputed by a third party.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13325">CVE-2018-13325</a></td>
		<td valign="top">The _sell function of a smart contract implementation for GROWCHAIN (GROW), an Ethereum token, has an integer overflow.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13233">CVE-2018-13233</a></td>
		<td valign="top">The sell function of a smart contract implementation for GSI, an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13232">CVE-2018-13232</a></td>
		<td valign="top">The sell function of a smart contract implementation for ENTER (ENTR) (Contract Name: EnterCoin), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13231">CVE-2018-13231</a></td>
		<td valign="top">The sell function of a smart contract implementation for ENTER (ENTR) (Contract Name: EnterToken), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13230">CVE-2018-13230</a></td>
		<td valign="top">The sell function of a smart contract implementation for DestiNeed (DSN), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13229">CVE-2018-13229</a></td>
		<td valign="top">The sell function of a smart contract implementation for RiptideCoin (RIPT), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13228">CVE-2018-13228</a></td>
		<td valign="top">The sell function of a smart contract implementation for Crowdnext (CNX), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13227">CVE-2018-13227</a></td>
		<td valign="top">The sell function of a smart contract implementation for MoneyChainNet (MCN), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13226">CVE-2018-13226</a></td>
		<td valign="top">The sell function of a smart contract implementation for YLCToken, an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13225">CVE-2018-13225</a></td>
		<td valign="top">The sell function of a smart contract implementation for MyYLC, an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13224">CVE-2018-13224</a></td>
		<td valign="top">The sell function of a smart contract implementation for Virtual Energy Units (VEU) (Contract Name: VEU_TokenERC20), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13223">CVE-2018-13223</a></td>
		<td valign="top">The sell function of a smart contract implementation for R Time Token v3 (RS) (Contract Name: RTokenMain), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13222">CVE-2018-13222</a></td>
		<td valign="top">The sell function of a smart contract implementation for ObjectToken (OBJ), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13221">CVE-2018-13221</a></td>
		<td valign="top">The sell function of a smart contract implementation for Extreme Coin (XT) (Contract Name: ExtremeToken), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13220">CVE-2018-13220</a></td>
		<td valign="top">The sell function of a smart contract implementation for MAVCash, an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13219">CVE-2018-13219</a></td>
		<td valign="top">The sell function of a smart contract implementation for YourCoin (ICO) (Contract Name: ETH033), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13218">CVE-2018-13218</a></td>
		<td valign="top">The sell function of a smart contract implementation for ICO Dollar (ICOD), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13217">CVE-2018-13217</a></td>
		<td valign="top">The sell function of a smart contract implementation for CoinToken, an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13216">CVE-2018-13216</a></td>
		<td valign="top">The sell function of a smart contract implementation for GreenMed (GRMD), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13215">CVE-2018-13215</a></td>
		<td valign="top">The sell function of a smart contract implementation for Sample Token (STK) (Contract Name: cashBackMintable), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13214">CVE-2018-13214</a></td>
		<td valign="top">The sell function of a smart contract implementation for GMile, an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13213">CVE-2018-13213</a></td>
		<td valign="top">The sell function of a smart contract implementation for TravelCoin (TRV), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13212">CVE-2018-13212</a></td>
		<td valign="top">The sell function of a smart contract implementation for EthereumLegit, an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13211">CVE-2018-13211</a></td>
		<td valign="top">The sell function of a smart contract implementation for MyToken, an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13210">CVE-2018-13210</a></td>
		<td valign="top">The sell function of a smart contract implementation for Providence Crypto Casino (PVE) (Contract Name: ProvidenceCasinoToken), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13209">CVE-2018-13209</a></td>
		<td valign="top">The sell function of a smart contract implementation for Nectar (NCTR), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13208">CVE-2018-13208</a></td>
		<td valign="top">The sell function of a smart contract implementation for MoneyTree (TREE), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13207">CVE-2018-13207</a></td>
		<td valign="top">The sell function of a smart contract implementation for PornCoin (PRNC), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13206">CVE-2018-13206</a></td>
		<td valign="top">The sell function of a smart contract implementation for ProvidenceCasino (PVE), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13205">CVE-2018-13205</a></td>
		<td valign="top">The sell function of a smart contract implementation for ohni_2 (OHNI), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13204">CVE-2018-13204</a></td>
		<td valign="top">The sell function of a smart contract implementation for ETHERCASH (ETC), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13203">CVE-2018-13203</a></td>
		<td valign="top">The sellBuyerTokens function of a smart contract implementation for SwapToken, an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13202">CVE-2018-13202</a></td>
		<td valign="top">The sell function of a smart contract implementation for MyBO, an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13201">CVE-2018-13201</a></td>
		<td valign="top">The sell function of a smart contract implementation for TiTok - Ticket Token (Contract Name: MyAdvancedToken7), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13200">CVE-2018-13200</a></td>
		<td valign="top">The sell function of a smart contract implementation for DateMe (DMX) (Contract Name: ProgressiveToken), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13199">CVE-2018-13199</a></td>
		<td valign="top">The sell function of a smart contract implementation for ETHEREUMBLACK (ETCBK), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13198">CVE-2018-13198</a></td>
		<td valign="top">The sell function of a smart contract implementation for STeX Exchange ICO (STE), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13197">CVE-2018-13197</a></td>
		<td valign="top">The sell function of a smart contract implementation for Welfare Token Fund (WTF), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13196">CVE-2018-13196</a></td>
		<td valign="top">The sell function of a smart contract implementation for T-Swap-Token (T-S-T), an Ethereum token, has an integer overflow in which "amount * sellPrice" can be zero, consequently reducing a seller's assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13195">CVE-2018-13195</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Cranoo (CRN), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13194">CVE-2018-13194</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TongTong Coin (TTCoin), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13193">CVE-2018-13193</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for hentaisolo (HAO), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13192">CVE-2018-13192</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Jobscoin (JOB), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13191">CVE-2018-13191</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Super Carbon Coin (SCC), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13190">CVE-2018-13190</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for DVChain, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13189">CVE-2018-13189</a></td>
		<td valign="top">The mint function of a smart contract implementation for Unolabo (UNLB), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13188">CVE-2018-13188</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MyBO, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13187">CVE-2018-13187</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CIBN Live Token (CIBN LIVE), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13186">CVE-2018-13186</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MMTCoin (MMT), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13185">CVE-2018-13185</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for appcoins (APPC), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13184">CVE-2018-13184</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for TravelZedi Token (ZEDI), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13183">CVE-2018-13183</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for JWC, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13182">CVE-2018-13182</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for loncoin (LON), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13181">CVE-2018-13181</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Troo, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13180">CVE-2018-13180</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for IMM Coin (IMC), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13179">CVE-2018-13179</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Air-Contact Token (AIR), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13178">CVE-2018-13178</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ECToints (ECT) (Contract Name: ECPoints), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13177">CVE-2018-13177</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MiningRigRentals Token (MRR), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13176">CVE-2018-13176</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Trust Zen Token (ZEN), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13175">CVE-2018-13175</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for AIChain, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13174">CVE-2018-13174</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CryptoABS (ABS), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13173">CVE-2018-13173</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for EliteShipperToken (ESHIP), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13172">CVE-2018-13172</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for bzxcoin (BZX), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13171">CVE-2018-13171</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for LadaToken (LDT), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13170">CVE-2018-13170</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Snoqualmie Coin (SNOW), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13169">CVE-2018-13169</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Ethereum Cash Pro (ECP), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13168">CVE-2018-13168</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Yu Gi Oh (YGO) (Contract Name: NetkillerBatchToken), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13167">CVE-2018-13167</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Yu Gi Oh (YGO), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13166">CVE-2018-13166</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for AthletiCoin (ATHA), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13165">CVE-2018-13165</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for JustDCoin (JustD), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13164">CVE-2018-13164</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for EPPCOIN (EPP), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13163">CVE-2018-13163</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Ethernet Cash (ENC), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13162">CVE-2018-13162</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ALEX, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13161">CVE-2018-13161</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MultiGames (MLT), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13160">CVE-2018-13160</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for etktokens (ETK), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13159">CVE-2018-13159</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for bankcoin (BNK), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13158">CVE-2018-13158</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for AssetToken, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13157">CVE-2018-13157</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CryptonitexCoin, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13156">CVE-2018-13156</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for bonusToken (BNS), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13155">CVE-2018-13155</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GEMCHAIN (GEM), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13146">CVE-2018-13146</a></td>
		<td valign="top">The mintToken, buy, and sell functions of a smart contract implementation for LEF, an Ethereum token, have an integer overflow.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13145">CVE-2018-13145</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for JavaSwapTest (JST), an Ethereum token, has an integer overflow.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13144">CVE-2018-13144</a></td>
		<td valign="top">** DISPUTED ** The transfer and transferFrom functions of a smart contract implementation for Pandora (PDX), an Ethereum token, have an integer overflow. NOTE: this has been disputed by a third party.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13132">CVE-2018-13132</a></td>
		<td valign="top">Spadeico is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13131">CVE-2018-13131</a></td>
		<td valign="top">SpadePreSale is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13130">CVE-2018-13130</a></td>
		<td valign="top">Bitotal (TFUND) is a smart contract running on Ethereum. The mintTokens function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13129">CVE-2018-13129</a></td>
		<td valign="top">SP8DE Token (SPX) is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13128">CVE-2018-13128</a></td>
		<td valign="top">Etherty Token (ETY) is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13127">CVE-2018-13127</a></td>
		<td valign="top">SP8DE PreSale Token (DSPX) is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13126">CVE-2018-13126</a></td>
		<td valign="top">MoxyOnePresale is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13113">CVE-2018-13113</a></td>
		<td valign="top">** DISPUTED ** The transfer and transferFrom functions of a smart contract implementation for Easy Trading Token (ETT), an Ethereum token, have an integer overflow. NOTE: this has been disputed by a third party.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13092">CVE-2018-13092</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Reimburse Token (REIM), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13091">CVE-2018-13091</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for sumocoin (SUMO), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13090">CVE-2018-13090</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for YiTongCoin (YTC), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13089">CVE-2018-13089</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Universal Coin (UCOIN), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13088">CVE-2018-13088</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Futures Pease (FP), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13087">CVE-2018-13087</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Coinstar (CSTR), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13086">CVE-2018-13086</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for IADOWR Coin (IAD), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13085">CVE-2018-13085</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for FreeCoin (FREE), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13084">CVE-2018-13084</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Good Time Coin (GTY), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13083">CVE-2018-13083</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Plaza Token (PLAZA), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13082">CVE-2018-13082</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for MODI Token (MODI), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13081">CVE-2018-13081</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GZS Token (GZS), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13080">CVE-2018-13080</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Goutex (GTX), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13079">CVE-2018-13079</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GoodTo (GTO), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13078">CVE-2018-13078</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Jitech (JTH), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13077">CVE-2018-13077</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CTB, an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13076">CVE-2018-13076</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Betcash (BC), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13075">CVE-2018-13075</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Carbon Exchange Coin Token (CEC), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13074">CVE-2018-13074</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for FIBToken (FIB), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13073">CVE-2018-13073</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for ETHEREUMBLACK (ETCBK), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13072">CVE-2018-13072</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Coffeecoin (COFFEE), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13071">CVE-2018-13071</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for CCindex10 (T10), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13070">CVE-2018-13070</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for EncryptedToken (ECC), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13069">CVE-2018-13069</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for DYchain (DYC), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13068">CVE-2018-13068</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for AzurionToken (AZU), an Ethereum token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-13041">CVE-2018-13041</a></td>
		<td valign="top">The mint function of a smart contract implementation for Link Platform (LNK), an Ethereum ERC20 token, has an integer overflow that allows the owner of the contract to set the balance of an arbitrary user to any value.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12975">CVE-2018-12975</a></td>
		<td valign="top">The random() function of the smart contract implementation for CryptoSaga, an Ethereum game, generates a random value with publicly readable variables such as timestamp, the current block's blockhash, and a private variable (which can be read with a getStorageAt call). Therefore, attackers can precompute the random number and manipulate the game (e.g., get powerful characters or get critical damages).

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12959">CVE-2018-12959</a></td>
		<td valign="top">The approveAndCall function of a smart contract implementation for Aditus (ADI), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all contract balances into their account).

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12885">CVE-2018-12885</a></td>
		<td valign="top">The randMod() function of the smart contract implementation for MyCryptoChamp, an Ethereum game, generates a random value with publicly readable variables such as the current block information and a private variable, (which can be read with a getStorageAt call). Therefore, attackers can get powerful champs/items and get rewards.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12703">CVE-2018-12703</a></td>
		<td valign="top">The approveAndCallcode function of a smart contract implementation for Block 18 (18T), an tradable Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer the contract's balances into their account) because the callcode (i.e., _spender.call(_extraData)) is not verified, aka the "evilReflex" issue. NOTE: a PeckShield disclosure states "some researchers have independently discussed the mechanism of such vulnerability."

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12702">CVE-2018-12702</a></td>
		<td valign="top">The approveAndCallcode function of a smart contract implementation for Globalvillage ecosystem (GVE), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer the contract's balances into their account) because the callcode (i.e., _spender.call(_extraData)) is not verified, aka the "evilReflex" issue. NOTE: a PeckShield disclosure states "some researchers have independently discussed the mechanism of such vulnerability."

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12511">CVE-2018-12511</a></td>
		<td valign="top">In the mintToken function of a smart contract implementation for Substratum (SUB), an Ethereum ERC20 token, the administrator can control mintedAmount, leverage an integer overflow, and modify a user account's balance arbitrarily.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12454">CVE-2018-12454</a></td>
		<td valign="top">The _addguess function of a simplelottery smart contract implementation for 1000 Guess, an Ethereum gambling game, generates a random value with publicly readable variables such as the current block information and a private variable (which can be read with a getStorageAt call). Therefore, it allows attackers to always win and get rewards.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12230">CVE-2018-12230</a></td>
		<td valign="top">An wrong logical check identified in the transferFrom function of a smart contract implementation for RemiCoin (RMC), an Ethereum ERC20 token, allows the attacker to steal tokens or conduct resultant integer underflow attacks.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12084">CVE-2018-12084</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for BitAsean (BAS), a tradable Ethereum ERC20 token, has no period constraint, which allows the owner to increase the total supply of the digital assets arbitrarily so as to make profits, aka the "tradeTrap" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12083">CVE-2018-12083</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for GOAL Bonanza (GOAL), a tradable Ethereum ERC20 token, has no period constraint, which allows the owner to increase the total supply of the digital assets arbitrarily so as to make profits, aka the "tradeTrap" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12082">CVE-2018-12082</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Fujinto (NTO), a tradable Ethereum ERC20 token, has no period constraint, which allows the owner to increase the total supply of the digital assets arbitrarily so as to make profits, aka the "tradeTrap" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12081">CVE-2018-12081</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Target Coin (TGT), a tradable Ethereum ERC20 token, has no period constraint, which allows the owner to increase the total supply of the digital assets arbitrarily so as to make profits, aka the "tradeTrap" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12080">CVE-2018-12080</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Internet Node Token (INT), a tradable Ethereum ERC20 token, has no period constraint, which allows the owner to increase the total supply of the digital assets arbitrarily so as to make profits, aka the "tradeTrap" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12079">CVE-2018-12079</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for Substratum (SUB), a tradable Ethereum ERC20 token, has no period constraint, which allows the owner to increase the total supply of the digital assets arbitrarily so as to make profits, aka the "tradeTrap" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12078">CVE-2018-12078</a></td>
		<td valign="top">The mintToken function of a smart contract implementation for PolyAI (AI), a tradable Ethereum ERC20 token, has no period constraint, which allows the owner to increase the total supply of the digital assets arbitrarily so as to make profits, aka the "tradeTrap" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12070">CVE-2018-12070</a></td>
		<td valign="top">The sell function of a smart contract implementation for SEC, a tradable Ethereum ERC20 token, allows a potential trap that could be used to cause financial damage to the seller, because of overflow of the multiplication of its argument amount and a manipulable variable sellPrice, aka the "tradeTrap" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12068">CVE-2018-12068</a></td>
		<td valign="top">The sell function of a smart contract implementation for Target Coin (TGT), a tradable Ethereum ERC20 token, allows a potential trap that could be used to cause financial damage to the seller, because of overflow of the multiplication of its argument amount and a manipulable variable sellPrice, aka the "tradeTrap" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12067">CVE-2018-12067</a></td>
		<td valign="top">The sell function of a smart contract implementation for Substratum (SUB), a tradable Ethereum ERC20 token, allows a potential trap that could be used to cause financial damage to the seller, because of overflow of the multiplication of its argument amount and a manipulable variable sellPrice, aka the "tradeTrap" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12063">CVE-2018-12063</a></td>
		<td valign="top">The sell function of a smart contract implementation for Internet Node Token (INT), a tradable Ethereum ERC20 token, allows a potential trap that could be used to cause financial damage to the seller, because of overflow of the multiplication of its argument amount and a manipulable variable sellPrice, aka the "tradeTrap" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12062">CVE-2018-12062</a></td>
		<td valign="top">The sell function of a smart contract implementation for SwftCoin (SWFTC), a tradable Ethereum ERC20 token, allows a potential trap that could be used to cause financial damage to the seller, because of overflow of the multiplication of its argument amount and a manipulable variable sellPrice, aka the "tradeTrap" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12056">CVE-2018-12056</a></td>
		<td valign="top">The maxRandom function of a smart contract implementation for All For One, an Ethereum gambling game, generates a random value with publicly readable variables because the _seed value can be retrieved with a getStorageAt call. Therefore, it allows attackers to always win and get rewards.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-12025">CVE-2018-12025</a></td>
		<td valign="top">The transferFrom function of a smart contract implementation for FuturXE (FXE), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized transfer of digital assets because of a logic error. The developer messed up with the boolean judgment - if the input value is smaller than or equal to allowed value, the transfer session would stop execution by returning false. This makes no sense, because the transferFrom() function should require the transferring value to not exceed the allowed value in the first place. Suppose this function asks for the allowed value to be smaller than the input. Then, the attacker could easily ignore the allowance: after this condition, the `allowed[from][msg.sender] -= value;` would cause an underflow because the allowed part is smaller than the value. The attacker could transfer any amount of FuturXe tokens of any accounts to an appointed account (the `_to` address) because the allowed value is initialized to 0, and the attacker could bypass this restriction even without the victim's private key.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-11687">CVE-2018-11687</a></td>
		<td valign="top">An integer overflow in the distributeBTR function of a smart contract implementation for Bitcoin Red (BTCR), an Ethereum ERC20 token, allows the owner to accomplish an unauthorized increase of digital assets by providing a large address[] array, as exploited in the wild in May 2018, aka the "ownerUnderflow" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-11561">CVE-2018-11561</a></td>
		<td valign="top">An integer overflow in the unprotected distributeToken function of a smart contract implementation for EETHER (EETHER), an Ethereum ERC20 token, will lead to an unauthorized increase of an attacker's digital assets.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-11446">CVE-2018-11446</a></td>
		<td valign="top">The buy function of a smart contract implementation for Gold Reward (GRX), an Ethereum ERC20 token, allows a potential trap that could be used to cause financial damage to the buyer because of overflow of the multiplication of its argument amount and a manipulable variable buyPrice, aka the "tradeTrap" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-11429">CVE-2018-11429</a></td>
		<td valign="top">ATLANT (ATL) is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-11411">CVE-2018-11411</a></td>
		<td valign="top">The transferFrom function of a smart contract implementation for DimonCoin (FUD), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-11335">CVE-2018-11335</a></td>
		<td valign="top">GVToken Genesis Vision (GVT) is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-11329">CVE-2018-11329</a></td>
		<td valign="top">The DrugDealer function of a smart contract implementation for Ether Cartel, an Ethereum game, allows attackers to take over the contract's ownership, aka ceoAnyone. After that, all the digital assets (including Ether balance and tokens) might be manipulated by the attackers, as exploited in the wild in May 2018.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-11239">CVE-2018-11239</a></td>
		<td valign="top">An integer overflow in the _transfer function of a smart contract implementation for Hexagon (HXG), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized increase of digital assets by providing a _to argument in conjunction with a large _value argument, as exploited in the wild in May 2018, aka the "burnOverflow" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-10973">CVE-2018-10973</a></td>
		<td valign="top">An integer overflow in the transferMulti function of a smart contract implementation for KoreaShow, an Ethereum ERC20 token, allows attackers to accomplish an unauthorized increase of digital assets via crafted _value parameters.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-10944">CVE-2018-10944</a></td>
		<td valign="top">The request_dividend function of a smart contract implementation for ROC (aka Rasputin Online Coin), an Ethereum ERC20 token, allows attackers to steal all of the contract's Ether.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-10769">CVE-2018-10769</a></td>
		<td valign="top">The transferProxy and approveProxy functions of a smart contract implementation for SmartMesh (SMT), an Ethereum ERC20 token, allow attackers to accomplish an unauthorized transfer of digital assets because replay attacks can occur with the same-named functions (with the same signatures) in other tokens: First (FST), GG Token (GG), M2C Mesh Network (MTC), M2C Mesh Network (mesh), and UG Token (UGT).

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-10706">CVE-2018-10706</a></td>
		<td valign="top">An integer overflow in the transferMulti function of a smart contract implementation for Social Chain (SCA), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized increase of digital assets, aka the "multiOverflow" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-10705">CVE-2018-10705</a></td>
		<td valign="top">The Owned smart contract implementation for Aurora DAO (AURA), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. An attacker can then conduct a lockBalances() denial of service attack.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-10666">CVE-2018-10666</a></td>
		<td valign="top">The Owned smart contract implementation for Aurora IDEX Membership (IDXM), an Ethereum ERC20 token, allows attackers to acquire contract ownership because the setOwner function is declared as public. A new owner can subsequently modify variables.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-10468">CVE-2018-10468</a></td>
		<td valign="top">The transferFrom function of a smart contract implementation for Useless Ethereum Token (UET), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect, as exploited in the wild starting in December 2017, aka the "transferFlaw" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-10376">CVE-2018-10376</a></td>
		<td valign="top">An integer overflow in the transferProxy function of a smart contract implementation for SmartMesh (aka SMT), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized increase of digital assets via crafted _fee and _value parameters, as exploited in the wild in April 2018, aka the "proxyOverflow" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2018-10299">CVE-2018-10299</a></td>
		<td valign="top">An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the "batchOverflow" issue.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2017-14457">CVE-2017-14457</a></td>
		<td valign="top">An exploitable information leak/denial of service vulnerability exists in the libevm (Ethereum Virtual Machine) `create2` opcode handler of CPP-Ethereum. A specially crafted smart contract code can cause an out-of-bounds read leading to memory disclosure or denial of service. An attacker can create/send malicious a smart contract to trigger this vulnerability.

</td>
	</tr>
	<tr>
		<td valign="top" nowrap="nowrap"><a href="/cgi-bin/cvename.cgi?name=CVE-2017-14451">CVE-2017-14451</a></td>
		<td valign="top">An exploitable out-of-bounds read vulnerability exists in libevm (Ethereum Virtual Machine) of CPP-Ethereum. A specially crafted smart contract code can cause an out-of-bounds read which can subsequently trigger an out-of-bounds write resulting in remote code execution. An attacker can create/send malicious smart contract to trigger this vulnerability.

</td>