[
    {
        "function_name": "batchTransfer",
        "code": "function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {\n    uint cnt = _receivers.length;\n    uint256 amount = uint256(cnt) * _value;\n    require(cnt > 0 && cnt <= 20);\n    require(_value > 0 && balances[msg.sender] >= amount);\n    balances[msg.sender] = balances[msg.sender].sub(amount);\n    for (uint i = 0; i < cnt; i++) {\n        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\n        Transfer(msg.sender, _receivers[i], _value);\n    }\n    return true;\n}",
        "vulnerability": "Integer Overflow",
        "reason": "The line 'uint256 amount = uint256(cnt) * _value;' lacks proper overflow protection. An attacker could exploit this by providing a large '_value' parameter such that the multiplication with 'cnt' (number of receivers) overflows the uint256 limit, resulting in a very small amount. This overflow bypasses the require condition 'balances[msg.sender] >= amount', enabling the attacker to distribute tokens far exceeding their actual balance, effectively creating tokens out of thin air. This was famously exploited in the 'BEC Token Incident' in the real world, causing massive financial losses.",
        "file_name": "2018-10299.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n}",
        "vulnerability": "Race Condition (Allowance Double-Spend)",
        "reason": "This approve function implementation contains a known ERC20 'race condition' vulnerability. If a user approves a spender to use a certain allowance and then subsequently decides to reduce that allowance, the spender can exploit the situation by quickly spending the original allowance before the user's reduction transaction is mined. This leads to unintended double-spending of the token allowance, potentially resulting in unauthorized token transfers.",
        "file_name": "2018-10299.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue."
    },
    {
        "function_name": "transferOwnership",
        "code": "function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n}",
        "vulnerability": "Missing Two-Step Ownership Transfer",
        "reason": "Ownership transfer is implemented in a single step without a confirmation step. If the new owner address is incorrectly set or mistakenly configured, it causes a permanent loss of contract control, as ownership privileges become unrecoverable. A two-step ownership transfer approach (proposedOwner and claimOwnership) should be implemented to prevent accidental loss of ownership control.",
        "file_name": "2018-10299.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue."
    }
]