[
    {
        "function_name": "batchTransfer",
        "code": "function batchTransfer(address[] _to, uint _value) public { balances[msg.sender] = safeSub( balances[msg.sender], _to.length * _value ); for (uint i = 0; i < _to.length; i++) { balances[_to[i]] = safeAdd(balances[_to[i]], _value); Transfer(msg.sender, _to[i], _value); } }",
        "vulnerability": "Unbounded loop causing DoS",
        "reason": "The batchTransfer function iterates over a user-provided array (_to) without any upper bound checks. An attacker can pass a very large array to trigger massive gas consumption, potentially exceeding the block gas limit and causing the transaction to revert. This could disrupt normal operations and lead to denial-of-service attacks against users who rely on batch transfers.",
        "file_name": "2018-17882.sol",
        "label": "Integer Overflow",
        "description": "An Integer overflow vulnerability exists in the batchTransfer function of a smart contract implementation for CryptoBotsBattle (CBTB), an Ethereum token. This vulnerability could be used by an attacker to create an arbitrary amount of tokens for any user."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { balances[_to] = safeAdd(balances[_to], _value); balances[_from] = safeSub(balances[_from], _value); if (_to != fights) { allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value); } Transfer(_from, _to, _value); return true; }",
        "vulnerability": "Missing allowance check for special address",
        "reason": "In the transferFrom function, if the recipient (_to) is equal to the special address fights, the allowance check is skipped entirely. This flaw allows attackers to move tokens from any user's account to the special address fights without requiring any allowance from the token holder, potentially allowing an attacker who controls or influences the fights address to drain tokens from other users without authorization.",
        "file_name": "2018-17882.sol",
        "label": "Integer Overflow",
        "description": "An Integer overflow vulnerability exists in the batchTransfer function of a smart contract implementation for CryptoBotsBattle (CBTB), an Ethereum token. This vulnerability could be used by an attacker to create an arbitrary amount of tokens for any user."
    },
    {
        "function_name": "transfer",
        "code": "function transfer(address _to, uint256 _value) public returns (bool success) { balances[msg.sender] = safeSub(balances[msg.sender], _value); balances[_to] = safeAdd(balances[_to], _value); Transfer(msg.sender, _to, _value); return true; }",
        "vulnerability": "Missing zero-address transfer check",
        "reason": "The transfer function does not include a check to prevent sending tokens to the zero address (address(0)). Tokens sent to address(0) will be irretrievably lost, effectively burning them unintentionally. An attacker could exploit this by causing token holders to accidentally burn their tokens through malicious interactions, or token holders themselves could accidentally lose tokens due to a typo, permanently reducing the token supply against the owner's intentions.",
        "file_name": "2018-17882.sol",
        "label": "Integer Overflow",
        "description": "An Integer overflow vulnerability exists in the batchTransfer function of a smart contract implementation for CryptoBotsBattle (CBTB), an Ethereum token. This vulnerability could be used by an attacker to create an arbitrary amount of tokens for any user."
    }
]