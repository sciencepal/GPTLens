[
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint256 _value) returns (bool success) { if(msg.data.length < (3 * 32) + 4) { throw; } if (_value == 0) { return false; } uint256 fromBalance = balances[_from]; uint256 allowance = allowed[_from][msg.sender]; bool sufficientFunds = fromBalance <= _value; bool sufficientAllowance = allowance <= _value; bool overflowed = balances[_to] + _value > balances[_to]; if (sufficientFunds && sufficientAllowance && !overflowed) { balances[_to] += _value; balances[_from] -= _value; allowed[_from][msg.sender] -= _value; Transfer(_from, _to, _value); return true; } else { return false; } }",
        "vulnerability": "Incorrect logic in checking balances and allowance",
        "reason": "The variable 'sufficientFunds' is set to true when the sender's balance is less than or equal to '_value' (fromBalance <= _value), and 'sufficientAllowance' is set to true when allowance is less than or equal to '_value' (allowance <= _value). This logic is reversed. It should be fromBalance >= _value and allowance >= _value respectively. This severe logical error allows attackers to transfer tokens from accounts even if the account has insufficient funds or insufficient allowance, effectively exploiting and draining tokens from vulnerable accounts.",
        "file_name": "2018-10468.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for Useless Ethereum Token (UET), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect, as exploited in the wild starting in December 2017, aka the \"transferFlaw\" issue."
    },
    {
        "function_name": "transfer",
        "code": "function transfer(address _to, uint256 _value) returns (bool success) { if(msg.data.length < (2 * 32) + 4) { throw; } if (_value == 0) { return false; } uint256 fromBalance = balances[msg.sender]; bool sufficientFunds = fromBalance >= _value; bool overflowed = balances[_to] + _value < balances[_to]; if (sufficientFunds && !overflowed) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; } else { return false; } }",
        "vulnerability": "Integer overflow vulnerability",
        "reason": "The check 'bool overflowed = balances[_to] + _value < balances[_to];' is used to detect overflow, but it is inadequate. Attackers can exploit this by sending a large token amount to an address with a high enough balance to cause an integer overflow. Due to lack of SafeMath library or proper overflow handling, attackers can exploit this to corrupt token balances, transferring and creating arbitrary tokens.",
        "file_name": "2018-10468.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for Useless Ethereum Token (UET), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect, as exploited in the wild starting in December 2017, aka the \"transferFlaw\" issue."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _value) returns (bool success) { if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; } allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); return true; }",
        "vulnerability": "Race condition vulnerability",
        "reason": "The approve function is vulnerable to a known ERC20 race condition attack. Attackers can exploit this vulnerability by continuously calling the 'transferFrom' function to drain tokens, after the victim has approved a non-zero allowance and plans to change the allowance. Due to the logic of allowing a change in allowance only when it is zero, the victim must first set allowance to zero and then set it again to a non-zero value. During this period, attackers can repeatedly invoke transferFrom to drain tokens, benefiting attackers financially.",
        "file_name": "2018-10468.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for Useless Ethereum Token (UET), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect, as exploited in the wild starting in December 2017, aka the \"transferFlaw\" issue."
    }
]