[
    {
        "function_name": "distributeFUD",
        "code": "function distributeFUD(address[] addresses, uint256 _value, uint256 _ethbal) onlyOwner { for (uint i = 0; i < addresses.length; i++) { if (getEthBalance(addresses[i]) < _ethbal) { continue; } balances[owner] -= _value; balances[addresses[i]] += _value; Transfer(owner, addresses[i], _value); } }",
        "vulnerability": "Unchecked arithmetic underflow",
        "reason": "The function distributeFUD performs balance deduction (balances[owner] -= _value;) in a loop without checking if the owner's balance is sufficient for each transfer. If the owner's balance is insufficient, this operation will underflow and cause the owner's balance to wrap around to a very large number, effectively creating tokens out of thin air. An attacker exploiting this can repeatedly call distributeFUD with carefully chosen parameters, causing the owner's balance to underflow and inflate token supply unexpectedly, severely disrupting token economics.",
        "file_name": "2018-11411.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for DimonCoin (FUD), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) { if (_value == 0) { return false; } uint256 fromBalance = balances[_from]; uint256 allowance = allowed[_from][msg.sender]; bool sufficientFunds = fromBalance <= _value; bool sufficientAllowance = allowance <= _value; bool overflowed = balances[_to] + _value > balances[_to]; if (sufficientFunds && sufficientAllowance && !overflowed) { balances[_to] += _value; balances[_from] -= _value; allowed[_from][msg.sender] -= _value; Transfer(_from, _to, _value); return true; } else { return false; } }",
        "vulnerability": "Incorrect logical checks in transferFrom",
        "reason": "The transferFrom function contains incorrect logical checks. Specifically, the conditions bool sufficientFunds = fromBalance <= _value; and bool sufficientAllowance = allowance <= _value; should use the '>=' operator to ensure sufficient funds and allowance. Currently, the logic is inverted, allowing transfers only when the sender has insufficient funds and allowance, or exactly equal, which is logically incorrect. This severe logic flaw can stop legitimate token transfers or, worse, potentially allow malicious actors to exploit any dependent logic relying on this function, effectively disrupting token transfers and related operations.",
        "file_name": "2018-11411.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for DimonCoin (FUD), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect."
    },
    {
        "function_name": "transferOwnership",
        "code": "function transferOwnership(address newOwner) onlyOwner { owner = newOwner; }",
        "vulnerability": "Missing zero-address check",
        "reason": "The transferOwnership function lacks a check to ensure newOwner is not the zero address (0x0). If the current owner mistakenly or maliciously sets the owner to the zero address, ownership of the contract will be permanently lost. This would prevent execution of owner-only functions, including critical administrative tasks. An attacker or malicious owner could exploit this vulnerability to disable essential contract functionality permanently, causing potential denial of service and loss of administrative control over the token.",
        "file_name": "2018-11411.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for DimonCoin (FUD), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect."
    }
]