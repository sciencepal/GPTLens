[
    {
        "function_name": "setMigrationAgent",
        "code": "function setMigrationAgent(address _agent) external { require(migrationAgent == 0); require(msg.sender == migrationMaster); migrationAgent = _agent; }",
        "vulnerability": "Lack of validation for migrationAgent address",
        "reason": "The function setMigrationAgent allows migrationMaster to set any arbitrary contract address as migrationAgent without verifying its correctness or safety. If the migrationMaster is compromised or malicious, the attacker can set migrationAgent to their malicious contract. Exploiting this vulnerability, attackers can trick token holders into migrating tokens into a malicious contract, permanently losing their tokens, or allowing attackers to steal tokens.",
        "file_name": "2018-11335.sol",
        "label": "Integer Overflow",
        "description": "GVToken Genesis Vision (GVT) is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner."
    },
    {
        "function_name": "mint",
        "code": "function mint(address holder, uint value) public { require(msg.sender == ico); require(value > 0); require(totalSupply + value <= TOKEN_LIMIT); balances[holder] += value; totalSupply += value; Transfer(0x0, holder, value); }",
        "vulnerability": "Unchecked overflow in arithmetic operations",
        "reason": "The mint function performs arithmetic operations without using SafeMath library functions, specifically the operations 'balances[holder] += value;' and 'totalSupply += value;'. This allows an attacker, who controls or compromises the ico contract, to pass extremely large values that cause integer overflow. Such overflow would corrupt the totalSupply or holder's balance, potentially allowing the attacker to mint large amounts of tokens beyond TOKEN_LIMIT, granting attackers unfair economic advantage.",
        "file_name": "2018-11335.sol",
        "label": "Integer Overflow",
        "description": "GVToken Genesis Vision (GVT) is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner."
    },
    {
        "function_name": "migrate",
        "code": "function migrate(uint value) external { require(migrationAgent != 0); require(value > 0); require(value <= balances[msg.sender]); balances[msg.sender] -= value; totalSupply -= value; totalMigrated += value; MigrationAgent(migrationAgent).migrateFrom(msg.sender, value); Migrate(msg.sender, migrationAgent, value); }",
        "vulnerability": "Unchecked external call to unknown migrationAgent",
        "reason": "The migrate function calls an external contract (migrationAgent) without any safety checks or restrictions. If migrationAgent is malicious or compromised, the migrateFrom function call can be exploited with a malicious contract that implements arbitrary logic. Attackers setting a malicious migrationAgent through compromised migrationMaster could steal tokens, freeze migrations, or execute malicious code, causing significant loss to token holders.",
        "file_name": "2018-11335.sol",
        "label": "Integer Overflow",
        "description": "GVToken Genesis Vision (GVT) is a smart contract running on Ethereum. The mint function has an integer overflow that allows minted tokens to be arbitrarily retrieved by the contract owner."
    }
]