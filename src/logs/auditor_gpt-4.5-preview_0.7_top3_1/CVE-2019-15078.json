[
    {
        "function_name": "distr",
        "code": "function distr(address _to, uint256 _amount) canDistr private returns (bool) { totalDistributed = totalDistributed.add(_amount); totalRemaining = totalRemaining.sub(_amount); balances[_to] = balances[_to].add(_amount); emit Distr(_to, _amount); emit Transfer(address(0), _to, _amount); return true; if (totalDistributed >= totalSupply) { distributionFinished = true; } }",
        "vulnerability": "Unreachable critical logic",
        "reason": "The condition to check if totalDistributed reaches totalSupply (if (totalDistributed >= totalSupply) { distributionFinished = true; }) is placed after a return statement (return true;). Due to Solidity execution rules, code after the return statement is never executed. Consequently, the distribution will never finish automatically, causing the distributionFinished boolean never to be set to true. While the function is private, it is called by getTokens(), making this vulnerability exploitable indirectly, as distributionFinished remains false indefinitely unless the owner manually calls finishDistribution(). This situation could lead to unexpected token distribution behaviors and potential logical flaws.",
        "file_name": "2019-15078.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free."
    },
    {
        "function_name": "getTokens",
        "code": "function getTokens() payable canDistr onlyWhitelist public { if (value > totalRemaining) { value = totalRemaining; } require(value <= totalRemaining); address investor = msg.sender; uint256 toGive = value; distr(investor, toGive); if (toGive > 0) { blacklist[investor] = true; } if (totalDistributed >= totalSupply) { distributionFinished = true; } value = value.div(100000).mul(99999); }",
        "vulnerability": "Predictable token distribution leading to Sybil attacks",
        "reason": "This function issues tokens according to a fixed global 'value', which decreases slightly with each successful call. Any user not already blacklisted can call getTokens() to receive tokens freely. Given that tokens are distributed without requiring any payment condition (besides being non-blacklisted), an attacker could easily create multiple Ethereum addresses (sybil attack) and call this function repeatedly from different addresses, collecting substantial tokens at little to no real cost. This predictable distribution mechanism makes the contract highly vulnerable to exploitation via Sybil attacks, causing rapid unfair token depletion.",
        "file_name": "2019-15078.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _value) public returns (bool success) { if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; } allowed[msg.sender][_spender] = _value; emit Approval(msg.sender, _spender, _value); return true; }",
        "vulnerability": "Approval race condition vulnerability",
        "reason": "This approve implementation has an inherent race condition (commonly known as the ERC20 approval vulnerability). It requires the allowance to be first set to zero before changing it to another non-zero value. This pattern is supposed to mitigate the vulnerability but actually creates operational inconvenience. Attackers can exploit this by carefully timing transactions to misuse approval amounts, potentially causing token holders to lose tokens unintentionally through transaction collisions. This issue is widely known and severely impacts real-world token implementations, making it exploitable and harmful to token holders.",
        "file_name": "2019-15078.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for AIRDROPX BORN through 2019-05-29, an Ethereum token. The name of the constructor has a typo (wrong case: XBornID versus XBORNID) that allows an attacker to change the owner of the contract and obtain cryptocurrency for free."
    }
]