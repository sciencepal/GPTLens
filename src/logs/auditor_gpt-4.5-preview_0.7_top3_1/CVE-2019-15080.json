[
    {
        "function_name": "owned",
        "code": "function owned() public { owner = msg.sender; }",
        "vulnerability": "Incorrect constructor definition allowing ownership hijacking",
        "reason": "The 'owned' function was intended to be the constructor, as indicated by its name matching the contract 'Owned'. However, due to a typo ('owned' instead of 'Owned'), it became a publicly callable function. As a result, any attacker can call this function anytime after deployment to immediately set themselves as the owner of the smart contract. This vulnerability allows an attacker to gain unrestricted owner privileges, including calling critical functions like 'mintTokens', 'burn', and 'blacklistAccount', thus compromising the entire contract and its tokens.",
        "file_name": "2019-15080.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for MORPH Token through 2019-06-05, an Ethereum token. A typo in the constructor of the Owned contract (which is inherited by MORPH Token) allows attackers to acquire contract ownership. A new owner can subsequently obtain MORPH Tokens for free and can perform a DoS attack."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom( address _from, address _to, uint256 _amount ) public returns (bool success) { if (balanceOf[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balanceOf[_to].add(_amount) > balanceOf[_to]) { balanceOf[_from] = balanceOf[_from].sub(_amount); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount); balanceOf[_to] = balanceOf[_to].add(_amount); return true; } else { return false; } }",
        "vulnerability": "Missing zero-address check in transferFrom function",
        "reason": "The 'transferFrom' function lacks a check to prevent sending tokens to the zero address. An attacker or malicious actor can exploit this oversight to accidentally or intentionally burn tokens by transferring them to the zero address. Token burning via unintended sending to zero address could cause irrecoverable loss of tokens for users, disrupting token economics and functionality. Therefore, this issue can negatively impact the trust and usability of the token.",
        "file_name": "2019-15080.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for MORPH Token through 2019-06-05, an Ethereum token. A typo in the constructor of the Owned contract (which is inherited by MORPH Token) allows attackers to acquire contract ownership. A new owner can subsequently obtain MORPH Tokens for free and can perform a DoS attack."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _amount) public returns (bool success) { allowed[msg.sender][_spender] = _amount; Approval(msg.sender, _spender, _amount); return true; }",
        "vulnerability": "ERC20 Approval Race Condition",
        "reason": "The 'approve' function is vulnerable to the known ERC20 'Approval Race Condition' attack. If a user changes an allowance from a non-zero value to another non-zero value, the spender might spend both the previous and new allowance by front-running the approval transaction. An attacker can exploit this vulnerability by carefully monitoring the mempool, quickly broadcasting a transaction to spend the old allowance before the new allowance transaction is mined, thus draining more tokens than the token holder intended. This can lead to significant token loss for users.",
        "file_name": "2019-15080.sol",
        "label": "Typo Constructor",
        "description": "An issue was discovered in a smart contract implementation for MORPH Token through 2019-06-05, an Ethereum token. A typo in the constructor of the Owned contract (which is inherited by MORPH Token) allows attackers to acquire contract ownership. A new owner can subsequently obtain MORPH Tokens for free and can perform a DoS attack."
    }
]