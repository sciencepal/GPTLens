[
    {
        "function_name": "transferProxy",
        "code": "function transferProxy(address _from, address _to, uint256 _value, uint256 _feeSmt, uint8 _v,bytes32 _r, bytes32 _s) public transferAllowed(_from) returns (bool){ if(balances[_from] < _feeSmt + _value) revert(); uint256 nonce = nonces[_from]; bytes32 h = keccak256(_from,_to,_value,_feeSmt,nonce); if(_from != ecrecover(h,_v,_r,_s)) revert(); if(balances[_to] + _value < balances[_to] || balances[msg.sender] + _feeSmt < balances[msg.sender]) revert(); balances[_to] += _value; Transfer(_from, _to, _value); balances[msg.sender] += _feeSmt; Transfer(_from, msg.sender, _feeSmt); balances[_from] -= _value + _feeSmt; nonces[_from] = nonce + 1; return true; }",
        "vulnerability": "Signature replay attack due to missing domain separator",
        "reason": "The function 'transferProxy' implements signature verification using 'ecrecover' without including any domain separator or unique contract-specific identifier (such as contract address or chain ID). As a result, the signature can be replayed in different contexts or even on different chains (chain replay attack). This vulnerability can be exploited by attackers in real-world scenarios to replay transactions signed by token holders, thus transferring tokens without authorization.",
        "file_name": "2018-10376.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the transferProxy function of a smart contract implementation for SmartMesh (aka SMT), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized increase of digital assets via crafted _fee and _value parameters, as exploited in the wild in April 2018, aka the \"proxyOverflow\" issue."
    },
    {
        "function_name": "approveProxy",
        "code": "function approveProxy(address _from, address _spender, uint256 _value, uint8 _v,bytes32 _r, bytes32 _s) public returns (bool success) { uint256 nonce = nonces[_from]; bytes32 hash = keccak256(_from,_spender,_value,nonce); if(_from != ecrecover(hash,_v,_r,_s)) revert(); allowed[_from][_spender] = _value; Approval(_from, _spender, _value); nonces[_from] = nonce + 1; return true; }",
        "vulnerability": "Signature replay attack due to missing domain separator",
        "reason": "Similar to 'transferProxy', the 'approveProxy' function constructs its signature hash without incorporating a domain separator, chain ID, or contract address. The absence of these important components exposes this function to replay attacks, allowing attackers to reuse signatures from one environment (testnet/mainnet, or one contract instance) to another, potentially enabling unauthorized allowance approvals and token spending.",
        "file_name": "2018-10376.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the transferProxy function of a smart contract implementation for SmartMesh (aka SMT), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized increase of digital assets via crafted _fee and _value parameters, as exploited in the wild in April 2018, aka the \"proxyOverflow\" issue."
    },
    {
        "function_name": "approveAndCallcode",
        "code": "function approveAndCallcode(address _spender, uint256 _value, bytes _extraData) public returns (bool success) { allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); if(!_spender.call(_extraData)) { revert(); } return true; }",
        "vulnerability": "Arbitrary external call vulnerability",
        "reason": "The 'approveAndCallcode' function uses an unsafe external call ('_spender.call(_extraData)') without proper validation, restrictions, or interface checks. An attacker can exploit this by crafting malicious '_extraData' payloads that trigger unintended functions on external contracts, potentially causing token loss, contract state manipulation, or even reentrancy attacks. This capability poses a severe risk, allowing attackers to execute arbitrary external code calls with the privileges of the token holder.",
        "file_name": "2018-10376.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the transferProxy function of a smart contract implementation for SmartMesh (aka SMT), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized increase of digital assets via crafted _fee and _value parameters, as exploited in the wild in April 2018, aka the \"proxyOverflow\" issue."
    }
]