[
    {
        "function_name": "transfer",
        "code": "function transfer(address _to, uint256 _amount) public returns (bool success) { require(balances[msg.sender] >= _amount && _amount > 0); balances[msg.sender] -= _amount; balances[_to] += _amount; Transfer(msg.sender, _to, _amount); return true; }",
        "vulnerability": "Missing input validation",
        "reason": "The function doesn't check if the '_to' address is a zero address. Transferring to a zero address is like burning tokens, it can lead to permanent loss of tokens.",
        "file_name": "2018-13836.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance."
    },
    {
        "function_name": "multiTransfer",
        "code": "function multiTransfer(address[] _addresses, uint[] _amounts) public returns (bool success) { require(_addresses.length <= 100 && _addresses.length == _amounts.length); uint totalAmount; for (uint a = 0; a < _amounts.length; a++) { totalAmount += _amounts[a]; } require(totalAmount > 0 && balances[msg.sender] >= totalAmount); balances[msg.sender] -= totalAmount; for (uint b = 0; b < _addresses.length; b++) { if (_amounts[b] > 0) { balances[_addresses[b]] += _amounts[b]; Transfer(msg.sender, _addresses[b], _amounts[b]); } } return true; }",
        "vulnerability": "Arithmetic Overflow",
        "reason": "The code doesn't check for arithmetic overflow when adding up the '_amounts'. This could potentially lead to incorrect balance calculations.",
        "file_name": "2018-13836.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance."
    },
    {
        "function_name": "withdrawFunds",
        "code": "function withdrawFunds(address _token) public returns (bool success) { require(msg.sender == owner); if (_token == address(0)) { owner.transfer(this.balance); } else { Token ERC20 = Token(_token); ERC20.transfer(owner, ERC20.balanceOf(this)); } return true; }",
        "vulnerability": "Potential for unexpected behavior",
        "reason": "The function transfers all the contract's ether to the owner without any restrictions or checks. This might not be an exploitable vulnerability, but it's a bad practice and can lead to unexpected behavior. For example, if the contract receives ether from a fallback function, it will be immediately transferred to the owner, which might not be the intended behavior.",
        "file_name": "2018-13836.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow vulnerability exists in the function multiTransfer of Rocket Coin (XRC), an Ethereum token smart contract. An attacker could use it to set any user's balance."
    }
]