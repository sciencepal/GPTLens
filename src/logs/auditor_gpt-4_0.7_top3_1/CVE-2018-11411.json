[
    {
        "function_name": "distributeFUD",
        "code": "function distributeFUD(address[] addresses, uint256 _value, uint256 _ethbal) onlyOwner { for (uint i = 0; i < addresses.length; i++) { if (getEthBalance(addresses[i]) < _ethbal) { continue; } balances[owner] -= _value; balances[addresses[i]] += _value; Transfer(owner, addresses[i], _value); } }",
        "vulnerability": "Underflow vulnerability",
        "reason": "In the distributeFUD function, the balance of the owner is reduced by _value without checking whether the balance of the owner is greater than or equal to _value. This could allow an underflow if _value is greater than the owner's balance which would result in an extremely large balance being assigned to the owner.",
        "file_name": "2018-11411.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for DimonCoin (FUD), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) { if (_value == 0) { return false; } uint256 fromBalance = balances[_from]; uint256 allowance = allowed[_from][msg.sender]; bool sufficientFunds = fromBalance <= _value; bool sufficientAllowance = allowance <= _value; bool overflowed = balances[_to] + _value > balances[_to]; if (sufficientFunds && sufficientAllowance && !overflowed) { balances[_to] += _value; balances[_from] -= _value; allowed[_from][msg.sender] -= _value; Transfer(_from, _to, _value); return true; } else { return false; } }",
        "vulnerability": "Insufficient balance check",
        "reason": "The condition for checking sufficient funds in the transferFrom function is incorrect. The condition 'fromBalance <= _value' should be 'fromBalance >= _value'. This could potentially allow a user to transfer more tokens than they have in their balance.",
        "file_name": "2018-11411.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for DimonCoin (FUD), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _value) returns (bool success) { if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; } allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); return true; }",
        "vulnerability": "Approval race condition",
        "reason": "The approve function is vulnerable to the race condition. If a user calls this function twice in quick succession, the second call could overwrite the first, potentially leading to unexpected behavior. This is commonly known as the approve/transferFrom race condition in ERC20 tokens.",
        "file_name": "2018-11411.sol",
        "label": "Wrong Logic",
        "description": "The transferFrom function of a smart contract implementation for DimonCoin (FUD), an Ethereum ERC20 token, allows attackers to steal assets (e.g., transfer all victims' balances into their account) because certain computations involving _value are incorrect."
    }
]