[
    {
        "function_name": "batchTransfer",
        "code": "function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) { uint cnt = _receivers.length; uint256 amount = uint256(cnt) * _value; require(cnt > 0 && cnt <= 20); require(_value > 0 && balances[msg.sender] >= amount); balances[msg.sender] = balances[msg.sender].sub(amount); for (uint i = 0; i < cnt; i++) { balances[_receivers[i]] = balances[_receivers[i]].add(_value); Transfer(msg.sender, _receivers[i], _value); } return true; }",
        "vulnerability": "Integer Overflow and Underflow",
        "reason": "In the 'batchTransfer' function, the calculation of the 'amount' variable can lead to an integer overflow if the product of 'cnt' and '_value' exceeds the maximum value of uint256. This could lead to unexpected behavior, such as a much smaller 'amount' than expected, which could then allow the transfer of tokens even when the sender's balance is insufficient.",
        "file_name": "2018-10299.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue."
    },
    {
        "function_name": "transfer",
        "code": "function transfer(address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value > 0 && _value <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); return true; }",
        "vulnerability": "Insufficient validation of '_to' address",
        "reason": "The 'transfer' function lacks a check for the case where '_to' address is the smart contract itself. If tokens are transferred to the contract's address, they could be permanently locked in the contract, as the contract does not have a function to transfer tokens it received.",
        "file_name": "2018-10299.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue."
    },
    {
        "function_name": "approve",
        "code": "function approve(address _spender, uint256 _value) public returns (bool) { allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); return true; }",
        "vulnerability": "Race Condition (also known as front-running)",
        "reason": "The 'approve' function is vulnerable to the race condition where, if you were to approve someone to spend a particular amount of tokens, and they were to spend them before you had a chance to change the approved amount, they could spend the tokens, and then spend the newly approved tokens again. This could be mitigated by requiring users to first reduce the spender's allowance to 0 before setting it to another value for the same spender.",
        "file_name": "2018-10299.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the batchTransfer function of a smart contract implementation for Beauty Ecosystem Coin (BEC), the Ethereum ERC20 token used in the Beauty Chain economic system, allows attackers to accomplish an unauthorized increase of digital assets by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the \"batchOverflow\" issue."
    }
]