[
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint256 _value) public transferAllowed(_from) returns (bool success) { if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) { balances[_to] += _value; balances[_from] -= _value; allowed[_from][msg.sender] -= _value; Transfer(_from, _to, _value); return true; } else { return false; } }",
        "vulnerability": "Missing Input Validation",
        "reason": "The function 'transferFrom' is missing a validation check to verify if the '_to' address is a non-zero address. This means that it's possible to send tokens to the 0x0 address, effectively destroying them and reducing the total supply of tokens.",
        "file_name": "2018-10376.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the transferProxy function of a smart contract implementation for SmartMesh (aka SMT), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized increase of digital assets via crafted _fee and _value parameters, as exploited in the wild in April 2018, aka the \"proxyOverflow\" issue."
    },
    {
        "function_name": "allocateTokens",
        "code": "function allocateTokens(address[] _owners, uint256[] _values) public onlyOwner { if(allocateEndTime < now) revert(); if(_owners.length != _values.length) revert(); for(uint256 i = 0; i < _owners.length ; i++){ address to = _owners[i]; uint256 value = _values[i]; if(totalSupply + value <= totalSupply || balances[to] + value <= balances[to]) revert(); totalSupply += value; balances[to] += value; } }",
        "vulnerability": "Arbitrary Minting",
        "reason": "The function 'allocateTokens' allows the contract owner to mint an arbitrary number of tokens at any time, which is a centralization risk. The owner can manipulate the token supply at will, potentially diluting the value of other holders' tokens.",
        "file_name": "2018-10376.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the transferProxy function of a smart contract implementation for SmartMesh (aka SMT), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized increase of digital assets via crafted _fee and _value parameters, as exploited in the wild in April 2018, aka the \"proxyOverflow\" issue."
    },
    {
        "function_name": "changeOwner",
        "code": "function changeOwner(address _newOwner) public onlyOwner { require(_newOwner != owner); newOwner = _newOwner; }",
        "vulnerability": "Ownership Takeover",
        "reason": "The 'changeOwner' function does not require the new owner to accept the ownership. This means that the contract owner can set any address as the new owner, even if that address is not controlled by anyone or is controlled by an attacker. This could result in an irreversible loss of control over the contract.",
        "file_name": "2018-10376.sol",
        "label": "Integer Overflow",
        "description": "An integer overflow in the transferProxy function of a smart contract implementation for SmartMesh (aka SMT), an Ethereum ERC20 token, allows attackers to accomplish an unauthorized increase of digital assets via crafted _fee and _value parameters, as exploited in the wild in April 2018, aka the \"proxyOverflow\" issue."
    }
]