[
    {
        "function_name": "transfer",
        "code": "function transfer(address _to, uint256 _value) public returns (bool success) { balances[msg.sender] = safeSub(balances[msg.sender], _value); balances[_to] = safeAdd(balances[_to], _value); Transfer(msg.sender, _to, _value); return true; }",
        "vulnerability": "Missing input validation",
        "reason": "This function allows an attacker to send tokens to the 0x0 address (burn address) or any other unintended addresses. This is because there is no validation on the '_to' address. The function can lead to permanent loss of tokens.",
        "file_name": "2018-17882.sol",
        "label": "Integer Overflow",
        "description": "An Integer overflow vulnerability exists in the batchTransfer function of a smart contract implementation for CryptoBotsBattle (CBTB), an Ethereum token. This vulnerability could be used by an attacker to create an arbitrary amount of tokens for any user."
    },
    {
        "function_name": "batchTransfer",
        "code": "function batchTransfer(address[] _to, uint _value) public { balances[msg.sender] = safeSub( balances[msg.sender], _to.length * _value ); for (uint i = 0; i < _to.length; i++) { balances[_to[i]] = safeAdd(balances[_to[i]], _value); Transfer(msg.sender, _to[i], _value); } }",
        "vulnerability": "Integer Overflow and Underflow",
        "reason": "In the '_to.length * _value' operation, if the multiplication of the length of '_to' array and '_value' is greater than the max limit of uint, it can cause overflow. If overflow occurs, the result will be less than the operands which can cause the 'safeSub' function to underflow, leading to incorrect balance updates.",
        "file_name": "2018-17882.sol",
        "label": "Integer Overflow",
        "description": "An Integer overflow vulnerability exists in the batchTransfer function of a smart contract implementation for CryptoBotsBattle (CBTB), an Ethereum token. This vulnerability could be used by an attacker to create an arbitrary amount of tokens for any user."
    },
    {
        "function_name": "transferFrom",
        "code": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { balances[_to] = safeAdd(balances[_to], _value); balances[_from] = safeSub(balances[_from], _value); if (_to != fights) { allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value); } Transfer(_from, _to, _value); return true; }",
        "vulnerability": "Missing authorization check",
        "reason": "The function allows to transfer tokens from any account to any other account without checking if 'msg.sender' is allowed to do so. This can result in unauthorized transfer of tokens.",
        "file_name": "2018-17882.sol",
        "label": "Integer Overflow",
        "description": "An Integer overflow vulnerability exists in the batchTransfer function of a smart contract implementation for CryptoBotsBattle (CBTB), an Ethereum token. This vulnerability could be used by an attacker to create an arbitrary amount of tokens for any user."
    }
]